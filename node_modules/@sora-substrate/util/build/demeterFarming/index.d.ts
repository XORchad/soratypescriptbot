import type { Observable } from '@polkadot/types/types';
import type { NumberLike } from '@sora-substrate/math';
import type { Api } from '../api';
import type { AccountAsset, Asset } from '../assets/types';
import type { DemeterPool, DemeterRewardToken, DemeterAccountPool } from './types';
export declare class DemeterFarmingModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    /**
     * Get a list of pools for farming & staking, by provided pool & reward asset adresses
     * @param poolAsset address of pool asset (paired with XOR)
     * @param rewardAsset address of reward asset
     * @returns Observable list of pools
     */
    getPoolsByAssetsObservable(poolAsset: string, rewardAsset: string): Observable<DemeterPool[]>;
    /**
     * Get a list of all pools for farming and staking
     * @returns Observable list of pools
     */
    getPoolsObservable(): Promise<Observable<DemeterPool[]> | null>;
    /**
     * Get an info about reward token
     * @param assetId asset address
     * @returns Observable token info
     */
    getTokenInfoObservable(assetId: string): Observable<DemeterRewardToken>;
    /**
     * Get a list of all reward tokens
     * @returns Observable list of token infos
     */
    getTokenInfosObservable(): Promise<Observable<DemeterRewardToken[]> | null>;
    /**
     * Get a list of active account pools for farming & staking
     * @returns Observable list of account pools (farming & staking)
     */
    getAccountPoolsObservable(): Observable<DemeterAccountPool[]>;
    /**
     * Deposit LP tokens for farming pool
     * @param amount amount of LP tokens to be provided for farming
     * @param poolAsset address of pool asset (paired with XOR)
     * @param rewardAsset address of reward asset
     * @param baseAsset address of base asset (XOR, XSTUSD)
     */
    depositLiquidity(amount: NumberLike, poolAsset: Asset | AccountAsset, rewardAsset: Asset | AccountAsset, baseAsset?: Asset | AccountAsset): Promise<T>;
    /**
     * Withdraw LP tokens from farming pool
     * @param amount amount of LP tokens to be withdrawed from farming
     * @param poolAsset address of pool asset (paired with XOR)
     * @param rewardAsset address of reward asset
     * @param baseAsset address of base asset (XOR, XSTUSD)
     */
    withdrawLiquidity(amount: NumberLike, poolAsset: Asset | AccountAsset, rewardAsset: Asset | AccountAsset, baseAsset?: Asset | AccountAsset): Promise<T>;
    /**
     * Stake token
     * @param asset address of asset to be staked
     * @param rewardAsset address of reward asset
     * @param amount amount of tokens to be staked
     */
    stake(asset: Asset | AccountAsset, rewardAsset: Asset | AccountAsset, amount: NumberLike): Promise<T>;
    /**
     * Unstake token
     * @param asset address of asset to be unstaked
     * @param rewardAsset address of reward asset
     * @param amount amount of tokens to be unstaked
     */
    unstake(asset: Asset | AccountAsset, rewardAsset: Asset | AccountAsset, amount: NumberLike): Promise<T>;
    /**
     * Get rewards from farming or staking pool
     * @param isFarm flag indicated is getting rewards from farming or staking pool
     * @param asset asset (staking) or pool asset (farming) address
     * @param rewardAsset reward asset address
     * @param baseAsset address of base asset (XOR, XSTUSD) for farming pool or staking token
     * @param amount amount (for history only)
     */
    getRewards(isFarm: boolean, asset: Asset | AccountAsset, rewardAsset: Asset | AccountAsset, baseAsset?: Asset | AccountAsset, amount?: NumberLike): Promise<T>;
}
