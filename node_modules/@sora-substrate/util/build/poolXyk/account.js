"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetIdToTechAssetId = assetIdToTechAssetId;
exports.poolAccountIdFromAssetPair = poolAccountIdFromAssetPair;
exports.poolTechAccountIdFromAssetPair = poolTechAccountIdFromAssetPair;
exports.techAccountIdToAccountId = techAccountIdToAccountId;
var _xxhash = require("@polkadot/util-crypto/xxhash");
var _typeDefinitions = require("@sora-substrate/type-definitions");
const predefinedAssets = _typeDefinitions.types['PredefinedAssetId']['_enum'];
function bytesToUint(bytes) {
  let value = 0;
  for (var i = 0; i < bytes.length; i++) {
    value = value * 256 + bytes[i];
  }
  return value;
}
function assetIdToTechAssetId(api, assetId) {
  const bytes = api.createType('AssetId', assetId).toU8a();
  const end = bytes[0] + 1;
  if (end < 5 && end > 1) {
    const frag = bytes.subarray(1, end);
    const index = bytesToUint(frag);
    if (index < predefinedAssets.length) {
      return api.createType('TechAssetId', {
        Wrapped: predefinedAssets[index]
      });
    }
  }
  return api.createType('TechAssetId', {
    Escaped: assetId
  });
}
function poolTechAccountIdFromAssetPair(api, baseAssetId, targetAssetId) {
  const techBaseAsset = assetIdToTechAssetId(api.api, baseAssetId);
  const techTargetAsset = assetIdToTechAssetId(api.api, targetAssetId);
  const tradingPair = api.api.createType('TechTradingPair', {
    baseAssetId: techBaseAsset,
    targetAssetId: techTargetAsset
  });
  const techPurpose = api.api.createType('TechPurpose', {
    LiquidityKeeper: tradingPair
  });
  const dexId = api.dex.getDexId(baseAssetId.toString());
  return api.api.createType('TechAccountId', {
    Pure: [dexId, techPurpose]
  });
}
function techAccountIdToAccountId(api, techAccountId) {
  const magicPrefix = new Uint8Array([84, 115, 79, 144, 249, 113, 160, 44, 96, 155, 45, 104, 78, 97, 181, 87]);
  const u8a = new Uint8Array(32);
  u8a.set(magicPrefix, 0);
  u8a.set((0, _xxhash.xxhashAsU8a)(techAccountId.toU8a(), 128), 16);
  return api.createType('AccountId', u8a);
}
function poolAccountIdFromAssetPair(api, baseAssetId, targetAssetId) {
  return techAccountIdToAccountId(api.api, poolTechAccountIdFromAssetPair(api, baseAssetId, targetAssetId));
}