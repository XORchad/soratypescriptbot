"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DexModule = void 0;
var _consts = require("./consts");
var _consts2 = require("../assets/consts");
class DexModule {
  constructor(root) {
    this.root = root;
    this.dexList = [];
    this.lockedSources = [];
    this.enabledSources = [];
  }
  get publicDexes() {
    return this.dexList.filter(dex => !!dex.isPublic);
  }
  get poolBaseAssetsIds() {
    return this.publicDexes.map(item => item.baseAssetId);
  }
  get baseAssetsIds() {
    return this.dexList.map(item => item.baseAssetId);
  }
  async update() {
    await Promise.allSettled([this.updateList(), this.updateEnabledSources(), this.updateLockedSources()]);
  }
  async updateList() {
    const data = await this.root.api.query.dexManager.dexInfos.entries();
    this.dexList = data.map(_ref => {
      var _codec$value$syntheti, _codec$value$syntheti2;
      let [key, codec] = _ref;
      const dexId = key.args[0].toNumber();
      const baseAssetId = codec.value.baseAssetId.code.toString();
      const syntheticBaseAssetId = (_codec$value$syntheti = (_codec$value$syntheti2 = codec.value.syntheticBaseAssetId) === null || _codec$value$syntheti2 === void 0 ? void 0 : _codec$value$syntheti2.code.toString()) !== null && _codec$value$syntheti !== void 0 ? _codec$value$syntheti : DexModule.defaultSyntheticAssetId;
      const isPublic = codec.value.isPublic.isTrue;
      return {
        dexId,
        baseAssetId,
        syntheticBaseAssetId,
        isPublic
      };
    });
  }
  async updateLockedSources() {
    const sources = await this.root.api.query.tradingPair.lockedLiquiditySources();
    this.lockedSources = sources.map(source => source.toString());
  }
  async updateEnabledSources() {
    const sources = await this.root.api.query.dexapi.enabledSourceTypes();
    this.enabledSources = sources.map(source => source.toString());
  }
  getDexId(baseAssetId) {
    var _this$dexList$find$de, _this$dexList$find;
    return (_this$dexList$find$de = (_this$dexList$find = this.dexList.find(dex => dex.baseAssetId === baseAssetId)) === null || _this$dexList$find === void 0 ? void 0 : _this$dexList$find.dexId) !== null && _this$dexList$find$de !== void 0 ? _this$dexList$find$de : DexModule.defaultDexId;
  }
  getBaseAssetId(dexId) {
    var _this$dexList$find$ba, _this$dexList$find2;
    return (_this$dexList$find$ba = (_this$dexList$find2 = this.dexList.find(dex => dex.dexId === dexId)) === null || _this$dexList$find2 === void 0 ? void 0 : _this$dexList$find2.baseAssetId) !== null && _this$dexList$find$ba !== void 0 ? _this$dexList$find$ba : DexModule.defaultBaseAssetId;
  }
  getSyntheticBaseAssetId(dexId) {
    var _this$dexList$find$sy, _this$dexList$find3;
    return (_this$dexList$find$sy = (_this$dexList$find3 = this.dexList.find(dex => dex.dexId === dexId)) === null || _this$dexList$find3 === void 0 ? void 0 : _this$dexList$find3.syntheticBaseAssetId) !== null && _this$dexList$find$sy !== void 0 ? _this$dexList$find$sy : DexModule.defaultSyntheticAssetId;
  }
}
exports.DexModule = DexModule;
DexModule.defaultDexId = _consts.DexId.XOR;
DexModule.defaultBaseAssetId = _consts2.XOR.address;
DexModule.defaultSyntheticAssetId = _consts2.XST.address;