import type { Observable } from '@polkadot/types/types';
import { BaseApi } from '../../BaseApi';
import { BridgeTxStatus } from '../consts';
import type { EthAssetKind } from './consts';
import type { EthAsset, EthApprovedRequest, EthRequest, EthHistory } from './types';
import type { EvmNetwork } from '../evm/types';
import type { Asset } from '../../assets/types';
export declare class EthBridgeApi<T> extends BaseApi<T> {
    private externalNetwork;
    constructor();
    initAccountStorage(): void;
    generateHistoryItem(params: EthHistory): EthHistory | null;
    saveHistory(history: EthHistory): void;
    protected getTransferExtrinsic(asset: Asset, recipient: string, amount: string | number): import("@polkadot/api-base/types").SubmittableExtrinsic<"promise", import("@polkadot/types/types").ISubmittableResult>;
    /**
     * Transfer through the bridge operation
     * @param asset Asset
     * @param recipient Ethereum account address
     * @param amount
     * @param historyId not required
     */
    transfer(asset: Asset, recipient: string, amount: string | number, historyId?: string): Promise<T>;
    /**
     * Get registered assets for bridge
     * @returns Array with all registered assets
     */
    getRegisteredAssets(): Promise<Record<string, EthAsset>>;
    /**
     * Get approved request
     * @param hash Bridge hash
     * @returns Approved request with proofs
     */
    getApprovedRequest(hash: string): Promise<EthApprovedRequest>;
    /**
     * Returns bridge request status
     * @param hash sora or evm transaction hash
     * @returns BridgeRequest status
     */
    getRequestStatus(hash: string): Promise<BridgeTxStatus | null>;
    /**
     * Creates a subscription to bridge request status
     * @param hash sora or evm transaction hash
     * @returns BridgeRequest status
     */
    subscribeOnRequestStatus(hash: string): Observable<BridgeTxStatus | null>;
    /**
     * Creates a subscription to bridge request data
     * @param hash sora or evm transaction hash
     * @returns BridgeRequest not formatted body
     */
    private subscribeOnRequestData;
    /**
     * Creates a subscription to bridge request
     * @param hash sora or evm transaction hash
     * @returns BridgeRequest if request is registered
     */
    subscribeOnRequest(hash: string): Observable<EthRequest | null>;
    getSoraHashByEthereumHash(ethereumHash: string): Promise<string>;
    getSoraBlockHashByRequestHash(requestHash: string): Promise<string>;
    getAssetKind(assetAddress: string): Promise<EthAssetKind | null>;
    getLockedAssets(evmNetwork: EvmNetwork, assetAddress: string): Promise<string>;
}
