"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertRequest = assertRequest;
exports.formatApprovedRequest = formatApprovedRequest;
exports.formatRequest = formatRequest;
var _math = require("@sora-substrate/math");
var _consts = require("../consts");
var _consts2 = require("./consts");
function assertRequest(result, message) {
  if (!result.isOk) {
    // Throws error
    const err = result.asErr.toString();
    console.error(`[${message}]:`, err);
    throw err;
  }
}
function formatRequest(request, status) {
  const formattedItem = {};
  formattedItem.status = status.toString();
  formattedItem.direction = _consts.BridgeTxDirection.Incoming;
  if (request.isIncoming) {
    var _code;
    const transferRequest = request.asIncoming[0].asTransfer;
    const assetId = transferRequest.assetId;
    formattedItem.soraAssetAddress = ((_code = assetId.code) !== null && _code !== void 0 ? _code : assetId).toString();
    formattedItem.amount = new _math.FPNumber(transferRequest.amount).toString();
    formattedItem.from = transferRequest.author.toString();
    formattedItem.kind = transferRequest.assetKind.toString();
    formattedItem.hash = transferRequest.txHash.toString();
  } else if (request.isLoadIncoming) {
    const txRequest = request.asLoadIncoming.asTransaction;
    // TODO: formattedItem.soraAssetAddress is missed here
    formattedItem.from = txRequest.author.toString();
    formattedItem.kind = txRequest.kind.toString();
    formattedItem.hash = txRequest.hash.toString();
  } else if (request.isOutgoing) {
    var _code2;
    formattedItem.direction = _consts.BridgeTxDirection.Outgoing;
    const outgoingRequest = request.asOutgoing;
    const transferRequest = outgoingRequest[0].asTransfer;
    const assetId = transferRequest.assetId;
    formattedItem.soraAssetAddress = ((_code2 = assetId.code) !== null && _code2 !== void 0 ? _code2 : assetId).toString();
    formattedItem.amount = new _math.FPNumber(transferRequest.amount).toString();
    formattedItem.from = transferRequest.from.toString();
    formattedItem.to = transferRequest.to.toString();
    formattedItem.hash = outgoingRequest[1].toString();
  } else {
    return null;
  }
  return formattedItem;
}
function formatApprovedRequest(request, proofs) {
  const formattedItem = {};
  const transferRequest = request.asTransfer;
  formattedItem.hash = transferRequest.txHash.toString();
  formattedItem.from = transferRequest.from.toString();
  formattedItem.to = transferRequest.to.toString();
  formattedItem.amount = new _math.FPNumber(transferRequest.amount).toCodecString();
  formattedItem.currencyType = transferRequest.currencyId.isAssetId ? _consts2.EthCurrencyType.AssetId : _consts2.EthCurrencyType.TokenAddress;
  formattedItem.r = [];
  formattedItem.s = [];
  formattedItem.v = [];
  proofs.forEach(proof => {
    formattedItem.r.push(proof.r.toString());
    formattedItem.s.push(proof.s.toString());
    formattedItem.v.push(proof.v.toNumber() + 27);
  });
  return formattedItem;
}