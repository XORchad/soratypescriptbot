import type { Observable, Signer } from '@polkadot/types/types';
import type { CreateResult } from '@polkadot/ui-keyring/types';
import type { CodecString } from '@sora-substrate/math';
import { EthBridgeApi } from './eth';
import { EvmBridgeApi } from './evm';
import { SubBridgeApi } from './sub';
import type { Api } from '../api';
import type { Storage } from '../storage';
import type { SupportedApps } from './types';
export declare class BridgeProxyModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    readonly eth: EthBridgeApi<T>;
    readonly evm: EvmBridgeApi<T>;
    readonly sub: SubBridgeApi<T>;
    initAccountStorage(): void;
    setStorage(storage: Storage): void;
    setSigner(signer: Signer): void;
    setAccount(account: CreateResult): void;
    logout(): void;
    getListApps(): Promise<SupportedApps>;
    isAssetTransferLimited(assetAddress: string): Promise<boolean>;
    getTransferLimitObservable(): Observable<CodecString>;
    getConsumedTransferLimitObservable(): Observable<CodecString>;
    getCurrentTransferLimitObservable(): Observable<CodecString>;
    getTransferLimitUnlockSchedule(): Promise<{
        blockNumber: number;
        amount: CodecString;
    }[]>;
}
