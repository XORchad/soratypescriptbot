import { BaseApi } from '../../BaseApi';
import type { CodecString } from '@sora-substrate/math';
import type { Asset } from '../../assets/types';
import type { EvmHistory, EvmNetwork, EvmAsset } from './types';
export declare class EvmBridgeApi<T> extends BaseApi<T> {
    constructor();
    generateHistoryItem(params: EvmHistory): EvmHistory | null;
    saveHistory(history: EvmHistory): void;
    getRegisteredAssets(evmNetwork: EvmNetwork): Promise<Record<string, EvmAsset>>;
    getUserTransactions(accountAddress: string, evmNetwork: EvmNetwork): Promise<import("../types").BridgeTransactionData[]>;
    getTransactionDetails(accountAddress: string, evmNetwork: EvmNetwork, hash: string): Promise<import("../types").BridgeTransactionData>;
    subscribeOnTransactionDetails(accountAddress: string, evmNetwork: EvmNetwork, hash: string): import("rxjs").Observable<import("../types").BridgeTransactionData>;
    getLockedAssets(evmNetwork: EvmNetwork, assetAddress: string): Promise<string>;
    /** UNCHECKED */
    protected getTransferExtrinsic(asset: Asset, recipient: string, amount: string | number, evmNetwork: EvmNetwork): import("@polkadot/api-base/types").SubmittableExtrinsic<"promise", import("@polkadot/types/types").ISubmittableResult>;
    transfer(asset: Asset, recipient: string, amount: string | number, evmNetwork: EvmNetwork, historyId?: string): Promise<void>;
    getNetworkFee(asset: Asset, evmNetwork: EvmNetwork): Promise<CodecString>;
}
