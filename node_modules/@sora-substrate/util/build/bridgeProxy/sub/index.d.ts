import { BaseApi } from '../../BaseApi';
import { SubNetwork, SubAssetKind } from './consts';
import { SoraParachainApi } from './parachain';
import type { CodecString } from '@sora-substrate/math';
import type { Asset } from '../../assets/types';
import type { SubHistory, SubAsset, ParachainIds } from './types';
export declare class SubBridgeApi<T> extends BaseApi<T> {
    constructor();
    readonly soraParachainApi: SoraParachainApi;
    parachainIds: ParachainIds;
    getRelayChain(subNetwork: SubNetwork): SubNetwork;
    getSoraParachain(subNetwork: SubNetwork): SubNetwork;
    getParachainId(subNetwork: SubNetwork): number;
    isRelayChain(subNetwork: SubNetwork): boolean;
    isSoraParachain(subNetwork: SubNetwork): boolean;
    private getRecipientArg;
    generateHistoryItem(params: SubHistory): SubHistory | null;
    saveHistory(history: SubHistory): void;
    getSubAssetDecimals(subNetwork: SubNetwork, soraAssetId: string): Promise<number>;
    getSubAssetKind(subNetwork: SubNetwork, soraAssetId: string): Promise<SubAssetKind>;
    private getSubAssetData;
    private getRelayChainAssets;
    private getParaChainAssets;
    getRegisteredAssets(subNetwork: SubNetwork): Promise<Record<string, SubAsset>>;
    getUserTransactions(accountAddress: string, subNetwork: SubNetwork): Promise<import("../types").BridgeTransactionData[]>;
    getTransactionDetails(accountAddress: string, subNetwork: SubNetwork, hash: string): Promise<import("../types").BridgeTransactionData>;
    subscribeOnTransactionDetails(accountAddress: string, subNetwork: SubNetwork, hash: string): import("rxjs").Observable<import("../types").BridgeTransactionData>;
    getLockedAssets(subNetwork: SubNetwork, assetAddress: string): Promise<string>;
    protected getTransferExtrinsic(asset: Asset, recipient: string, amount: string | number, subNetwork: SubNetwork): import("@polkadot/api-base/types").SubmittableExtrinsic<"promise", import("@polkadot/types/types").ISubmittableResult>;
    transfer(asset: Asset, recipient: string, amount: string | number, subNetwork: SubNetwork, historyId?: string): Promise<void>;
    getNetworkFee(asset: Asset, subNetwork: SubNetwork): Promise<CodecString>;
}
