"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZeroBalance = exports.XSTUSD = exports.XST = exports.XOR = exports.VAL = exports.TBCD = exports.PSWAP = exports.NativeAssets = exports.MaxTotalSupply = exports.MaxRustNumber = exports.KnownSymbols = exports.KnownAssets = exports.ETH = exports.DAI = exports.BalanceType = void 0;
var _math = require("@sora-substrate/math");
const MaxRustNumber = '170141183460469231731.687303715884105727';
exports.MaxRustNumber = MaxRustNumber;
const MaxTotalSupply = '100000000000000000000'; // It's better to round it for UX
exports.MaxTotalSupply = MaxTotalSupply;
let KnownSymbols;
exports.KnownSymbols = KnownSymbols;
(function (KnownSymbols) {
  KnownSymbols["XOR"] = "XOR";
  KnownSymbols["VAL"] = "VAL";
  KnownSymbols["PSWAP"] = "PSWAP";
  KnownSymbols["DAI"] = "DAI";
  KnownSymbols["ETH"] = "ETH";
  KnownSymbols["XSTUSD"] = "XSTUSD";
  KnownSymbols["XST"] = "XST";
  KnownSymbols["TBCD"] = "TBCD";
})(KnownSymbols || (exports.KnownSymbols = KnownSymbols = {}));
const ZERO_STR = '0';
const ZeroBalance = {
  free: ZERO_STR,
  reserved: ZERO_STR,
  frozen: ZERO_STR,
  bonded: ZERO_STR,
  locked: ZERO_STR,
  total: ZERO_STR,
  transferable: ZERO_STR
};
exports.ZeroBalance = ZeroBalance;
let BalanceType;
exports.BalanceType = BalanceType;
(function (BalanceType) {
  BalanceType["Free"] = "free";
  BalanceType["Reserved"] = "reserved";
  BalanceType["Frozen"] = "frozen";
  BalanceType["Bonded"] = "bonded";
  BalanceType["Locked"] = "locked";
  BalanceType["Total"] = "total";
  BalanceType["Transferable"] = "transferable";
})(BalanceType || (exports.BalanceType = BalanceType = {}));
class ArrayLike extends Array {
  constructor(items) {
    super();
    items && this.addItems(items);
  }
  addItems(items) {
    if (!(items instanceof Array)) {
      return;
    }
    this.push(...items);
  }
  contains(info) {
    return !!this.find(asset => [asset.address, asset.symbol].includes(info));
  }
  /**
   * **ONLY** for known assets
   */
  get(info) {
    return this.find(asset => [asset.address, asset.symbol].includes(info));
  }
}
const NativeAssets = new ArrayLike([{
  address: '0x0200000000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.XOR,
  name: 'SORA',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x0200040000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.VAL,
  name: 'SORA Validator Token',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x0200050000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.PSWAP,
  name: 'Polkaswap',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x0200080000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.XSTUSD,
  name: 'SORA Synthetic USD',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x0200090000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.XST,
  name: 'SORA Synthetics',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x02000a0000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.TBCD,
  name: 'SORA TBC Dollar',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}]);
exports.NativeAssets = NativeAssets;
const KnownAssets = new ArrayLike([...NativeAssets, {
  address: '0x0200060000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.DAI,
  name: 'Dai Stablecoin',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}, {
  address: '0x0200070000000000000000000000000000000000000000000000000000000000',
  symbol: KnownSymbols.ETH,
  name: 'Ether',
  decimals: _math.FPNumber.DEFAULT_PRECISION
}]);
exports.KnownAssets = KnownAssets;
const XOR = NativeAssets.get(KnownSymbols.XOR);
exports.XOR = XOR;
const VAL = NativeAssets.get(KnownSymbols.VAL);
exports.VAL = VAL;
const PSWAP = NativeAssets.get(KnownSymbols.PSWAP);
exports.PSWAP = PSWAP;
const XSTUSD = NativeAssets.get(KnownSymbols.XSTUSD);
exports.XSTUSD = XSTUSD;
const DAI = KnownAssets.get(KnownSymbols.DAI);
exports.DAI = DAI;
const ETH = KnownAssets.get(KnownSymbols.ETH);
exports.ETH = ETH;
const XST = KnownAssets.get(KnownSymbols.XST);
exports.XST = XST;
const TBCD = KnownAssets.get(KnownSymbols.TBCD);
exports.TBCD = TBCD;