import { FPNumber, CodecString } from '@sora-substrate/math';
import type { Observable } from '@polkadot/types/types';
import type { Api } from '../api';
import type { RewardInfo, RewardsInfo } from './types';
declare type CrowdloanInfo = {
    totalContribution: FPNumber;
    rewards: Record<string, FPNumber>;
    startBlock: number;
    length: number;
    account: string;
    tag: string;
};
export declare class RewardsModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    private isClaimableReward;
    private containsRewardsForType;
    private prepareRewardInfo;
    private prepareVestedRewardsInfo;
    /**
     * Check rewards for external account
     * @param externalAddress address of external account (ethereum account address)
     * @returns rewards array with not zero amount
     */
    checkForExternalAccount(externalAddress: string): Promise<Array<RewardInfo>>;
    /**
     * Get observable reward for liqudity provision
     * @returns observable liquidity provision RewardInfo
     */
    getLiquidityProvisionRewardsSubscription(): Observable<RewardInfo>;
    getVestedRewardsSubscription(): Observable<RewardsInfo>;
    /**
     * Get all crowdloans infos
     */
    getCrowdloans(): Promise<CrowdloanInfo[]>;
    /**
     * Get observable map of rewards user already claimed
     */
    getCrowdloanUserInfoObservable(tag: string): Observable<{
        contribution: FPNumber;
        rewarded: Record<string, FPNumber>;
    }>;
    /**
     * Get observable crowdloan rewards
     */
    getCrowdloanRewardsSubscription(): Promise<Observable<Record<string, RewardInfo[]>>>;
    /**
     * Returns a params object { extrinsic, args }
     * @param rewards claiming rewards
     * @param signature message signed in external wallet (if want to claim external rewards), otherwise empty string
     */
    private calcTxParams;
    /**
     * Get network fee for claim rewards operation
     */
    getNetworkFee(rewards: Array<RewardInfo>, signature?: string): Promise<CodecString>;
    /**
     * Claim rewards
     * @param signature message signed in external wallet (if want to claim external rewards)
     */
    claim(rewards: Array<RewardInfo | RewardsInfo>, signature?: string, fee?: CodecString, externalAddress?: string): Promise<T>;
}
export {};
