import type { History } from '../BaseApi';
export interface StakingHistory extends History {
    validators?: string[];
    payee?: string;
    controller?: string;
    payouts: Payouts;
}
export declare enum StakingRewardsDestination {
    /** not used in sora */
    Staked = "Staked",
    Stash = "Stash",
    Controller = "Controller",
    None = "None"
}
export interface ValidatorInfo {
    address: string;
    commission: string;
    blocked?: boolean;
}
export interface ValidatorInfoFull extends ValidatorInfo {
    rewardPoints: number;
    nominators: Others;
    identity: Identity | null;
    apy: string;
    isOversubscribed: boolean;
    isKnownGood: boolean;
    stake: {
        stakeReturn: string;
        total: string;
        own: string;
    };
}
export declare type Unlocking = {
    value: string;
    remainingEras: string;
    remainingHours: string;
    remainingDays: string;
};
export declare type MyStakingInfo = {
    myValidators: string[];
    payee: string;
    controller: string;
    redeemAmount: string;
    activeStake: string;
    totalStake: string;
    unbond: {
        unlocking: Unlocking[];
        sum: string;
    };
};
declare type Others = {
    who: string;
    value: string;
}[];
export interface ValidatorExposure {
    total: string;
    own: string;
    others: Others;
}
export interface ElectedValidator extends ValidatorExposure {
    address: string;
}
export declare type StashNominatorsInfo = {
    submittedIn: number;
    suppressed: boolean;
    targets: string[];
};
export declare type ActiveEra = {
    index: number;
    start: number;
};
export declare type EraElectionStatus = {
    close: null;
} | {
    open: number;
};
export declare type RewardPointsIndividual = {
    [key: string]: number;
};
export declare type EraRewardPoints = {
    total: number;
    individual: RewardPointsIndividual;
};
export declare type AccountStakingLedgerUnlock = {
    value: string;
    era: number;
};
export declare type AccountStakingLedger = {
    stash: string;
    total: string;
    active: string;
    unlocking: AccountStakingLedgerUnlock[];
};
export declare type StakeReturn = {
    apy: string;
    stakeReturn: string;
};
export declare type NominatorReward = {
    era: string;
    sumRewards: string;
    validators: {
        address: string;
        value: string;
    }[];
}[];
export declare type Payouts = {
    era: string;
    validators: string[];
}[];
declare type JudgementsType = 'Unknown' | 'FeePaid' | 'Reasonable' | 'KnownGood' | 'OutOfDate' | 'LowQuality' | 'Erroneous';
declare type OriginalInfoItem = 'None' | {
    Raw: string;
};
declare type InfoItem = 'None' | string;
export declare type OriginalInfo = {
    legal: OriginalInfoItem;
    web: OriginalInfoItem;
    riot: OriginalInfoItem;
    additional: [];
    pgpFingerprint: null;
    image: OriginalInfoItem;
    display: OriginalInfoItem;
    email: OriginalInfoItem;
    twitter: OriginalInfoItem;
};
export declare type Info = {
    legal: InfoItem;
    web: InfoItem;
    riot: InfoItem;
    additional: [];
    pgpFingerprint: null;
    image: InfoItem;
    display: InfoItem;
    email: InfoItem;
    twitter: InfoItem;
    name: string;
    description: string;
};
interface CommonIdentity {
    deposit: string;
    judgements: [1 | 0, JudgementsType][];
}
export interface OriginalIdentity extends CommonIdentity {
    info: OriginalInfo;
}
export interface Identity {
    judgements: [1 | 0, JudgementsType][];
    deposit: string;
    info: Info;
}
export {};
