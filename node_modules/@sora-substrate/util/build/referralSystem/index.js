"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferralSystemModule = void 0;
var _util = require("@polkadot/util");
var _rxjs = require("rxjs");
var _math = require("@sora-substrate/math");
var _logger = require("../logger");
var _consts = require("../assets/consts");
var _BaseApi = require("../BaseApi");
class ReferralSystemModule {
  constructor(root) {
    this.root = root;
  }

  /**
   * Returns the referrer of the invited user by Id
   * @param invitedUserId address of invited account
   * @returns referrer
   */
  async getReferrer(invitedUserId) {
    const referrer = await this.root.api.query.referrals.referrers(invitedUserId);
    return !referrer ? '' : referrer.toString();
  }

  /**
   * Returns the referrer of the account
   * @returns referrer
   */
  async getAccountReferrer() {
    return this.getReferrer(this.root.account.pair.address);
  }

  /**
   * Returns the referrer subscription
   * @param invitedUserId address of invited account
   */
  subscribeOnReferrer(invitedUserId) {
    return this.root.apiRx.query.referrals.referrers(invitedUserId).pipe((0, _rxjs.map)(codec => codec.toJSON()));
  }

  /**
   * Returns the referrer subscription
   */
  subscribeOnAccountReferrer() {
    return this.subscribeOnReferrer(this.root.account.pair.address);
  }

  /**
   * Returns invited users of the referrer
   * @param referrerId address of referrer account
   * @returns array of invited users
   */
  async getInvitedUsers(referrerId) {
    return (await this.root.api.query.referrals.referrals(referrerId)).map(accountId => accountId.toString());
  }

  /**
   * Referrer's invited users subscription
   * @param referrerId address of referrer account
   */
  subscribeOnInvitedUsers(referrerId) {
    return this.root.apiRx.query.referrals.referrals(referrerId).pipe((0, _rxjs.map)(data => data.map(accountId => accountId.toString())));
  }

  /**
   * Account's invited users subscription
   */
  subscribeOnAccountInvitedUsers() {
    return this.subscribeOnInvitedUsers(this.root.account.pair.address);
  }

  /**
   * Transfer XOR balance from the referral account to the special account
   * This balance can be used by referrals to pay the fee
   * @param amount balance to reserve
   */
  reserveXor(amount) {
    (0, _util.assert)(this.root.account, _logger.Messages.connectWallet);
    return this.root.submitExtrinsic(this.root.api.tx.referrals.reserve(new _math.FPNumber(amount, _consts.XOR.decimals).toCodecString()), this.root.account.pair, {
      symbol: _consts.XOR.symbol,
      amount: `${amount}`,
      assetAddress: _consts.XOR.address,
      type: _BaseApi.Operation.ReferralReserveXor
    });
  }

  /**
   * Unreserve XOR balance
   * @param amount balance to unreserve
   */
  unreserveXor(amount) {
    (0, _util.assert)(this.root.account, _logger.Messages.connectWallet);
    return this.root.submitExtrinsic(this.root.api.tx.referrals.unreserve(new _math.FPNumber(amount, _consts.XOR.decimals).toCodecString()), this.root.account.pair, {
      symbol: _consts.XOR.symbol,
      amount: `${amount}`,
      assetAddress: _consts.XOR.address,
      type: _BaseApi.Operation.ReferralUnreserveXor
    });
  }

  /**
   * Sets invited user to their referrer if the account doesn’t have a referrer yet.
   * This extrinsic is paid by the bonded balance of the referrer if the invited user doesn’t have a referrer,
   * otherwise the extrinsic fails and the fee is paid by the invited user. Also, if referrer doesn't have enough
   * bonded balance for this call, then this method will fail.
   * @param referrerId address of referrer account
   */
  async setInvitedUser(referrerId) {
    (0, _util.assert)(this.root.account, _logger.Messages.connectWallet);
    // Check the ability for paying fee
    const bondedData = await this.root.api.query.referrals.referrerBalances(referrerId);
    const bonded = new _math.FPNumber(bondedData || 0);
    const requiredFeeValue = _math.FPNumber.fromCodecValue(this.root.NetworkFee.ReferralSetInvitedUser || 0);
    (0, _util.assert)(_math.FPNumber.gte(bonded, requiredFeeValue), _logger.Messages.inabilityOfReferrerToPayFee);
    const formattedToAddress = referrerId.slice(0, 2) === 'cn' ? referrerId : this.root.formatAddress(referrerId);
    return this.root.submitExtrinsic(this.root.api.tx.referrals.setReferrer(referrerId), this.root.account.pair, {
      to: formattedToAddress,
      type: _BaseApi.Operation.ReferralSetInvitedUser
    });
  }

  /**
   * Checks referrer input. Returns `true` if referrer you set has enough bonded XOR to invite you.
   * @param accountId Referrer account ID
   */
  async hasEnoughXorForFee(accountId) {
    const bondedData = await this.root.api.query.referrals.referrerBalances(accountId);
    const bonded = new _math.FPNumber(bondedData || 0);
    const requiredFeeValue = _math.FPNumber.fromCodecValue(this.root.NetworkFee.ReferralSetInvitedUser || 0);
    return _math.FPNumber.gte(bonded, requiredFeeValue);
  }
}
exports.ReferralSystemModule = ReferralSystemModule;