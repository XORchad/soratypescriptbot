import { NumberLike } from '@sora-substrate/math';
import type { Observable } from '@polkadot/types/types';
import type { Api } from '../api';
export declare class ReferralSystemModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    /**
     * Returns the referrer of the invited user by Id
     * @param invitedUserId address of invited account
     * @returns referrer
     */
    getReferrer(invitedUserId: string): Promise<string>;
    /**
     * Returns the referrer of the account
     * @returns referrer
     */
    getAccountReferrer(): Promise<string>;
    /**
     * Returns the referrer subscription
     * @param invitedUserId address of invited account
     */
    subscribeOnReferrer(invitedUserId: string): Observable<null | string>;
    /**
     * Returns the referrer subscription
     */
    subscribeOnAccountReferrer(): Observable<null | string>;
    /**
     * Returns invited users of the referrer
     * @param referrerId address of referrer account
     * @returns array of invited users
     */
    getInvitedUsers(referrerId: string): Promise<Array<string>>;
    /**
     * Referrer's invited users subscription
     * @param referrerId address of referrer account
     */
    subscribeOnInvitedUsers(referrerId: string): Observable<Array<string>>;
    /**
     * Account's invited users subscription
     */
    subscribeOnAccountInvitedUsers(): Observable<Array<string>>;
    /**
     * Transfer XOR balance from the referral account to the special account
     * This balance can be used by referrals to pay the fee
     * @param amount balance to reserve
     */
    reserveXor(amount: NumberLike): Promise<T>;
    /**
     * Unreserve XOR balance
     * @param amount balance to unreserve
     */
    unreserveXor(amount: NumberLike): Promise<T>;
    /**
     * Sets invited user to their referrer if the account doesn’t have a referrer yet.
     * This extrinsic is paid by the bonded balance of the referrer if the invited user doesn’t have a referrer,
     * otherwise the extrinsic fails and the fee is paid by the invited user. Also, if referrer doesn't have enough
     * bonded balance for this call, then this method will fail.
     * @param referrerId address of referrer account
     */
    setInvitedUser(referrerId: string): Promise<T>;
    /**
     * Checks referrer input. Returns `true` if referrer you set has enough bonded XOR to invite you.
     * @param accountId Referrer account ID
     */
    hasEnoughXorForFee(accountId: string): Promise<boolean>;
}
