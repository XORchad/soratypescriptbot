import { PriceVariant } from '@sora-substrate/liquidity-proxy';
import type { OrderBook, OrderBookPriceVolume } from '@sora-substrate/liquidity-proxy';
import type { Observable } from '@polkadot/types/types';
import type { Api } from '../api';
import type { LimitOrder } from './types';
export declare class OrderBookModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    serializedKey(base: string, quote: string): string;
    deserializeKey(key: string): Partial<{
        base: string;
        quote: string;
    }>;
    /**
     * Get order books and set to public orderBooks object
     *
     */
    getOrderBooks(): Promise<Record<string, OrderBook>>;
    /**
     * Get user's order book addresses and set to public userOrderBooks array
     */
    getUserOrderBooks(account: string): Promise<string[]>;
    /**
     * Creates a subscription that relies on block emitting
     * @param account account address
     * @returns array of book addresses the user is in
     */
    subscribeOnUserOrderBooks(account: string): Observable<Promise<string[]>>;
    /**
     * Get observable order book data
     * @param orderBookId base and quote addresses
     */
    getOrderBookObservable(base: string, quote: string): Observable<OrderBook | null>;
    /**
     * Get mappings price to amount of asks
     *
     * Represented as **[[price, amount], [price, amount], ...]**
     * @param orderBookId base and quote addresses
     */
    subscribeOnAggregatedAsks(base: string, quote: string): Observable<Array<OrderBookPriceVolume>>;
    /**
     * Get mappings price to amount of bids
     *
     * Represented as **[[price, amount], [price, amount], ...]**
     * @param orderBookId base and quote addresses
     */
    subscribeOnAggregatedBids(base: string, quote: string): Observable<Array<OrderBookPriceVolume>>;
    /**
     * Get user's limit order ids
     * @param orderBookId base and quote addresses
     * @param account account address
     */
    subscribeOnUserLimitOrdersIds(base: string, quote: string, account: string): Observable<Array<number>>;
    /**
     * Get user's limit order info
     * @param orderBookId base and quote addresses
     * @param id limit order id
     * @returns formatted limit order info
     */
    getLimitOrder(base: string, quote: string, id: number): Promise<LimitOrder>;
    /**
     * Place limit order
     * @param orderBookId base and quote addresses
     * @param price order price
     * @param amount order amount
     * @param side buy or sell
     * @param timestamp order expiration
     */
    placeLimitOrder(base: string, quote: string, price: string, amount: string, side: PriceVariant, timestamp?: number): Promise<T>;
    /**
     * Cancel one limit order by id
     * @param orderBookId base and quote addresses
     * @param orderId number
     */
    cancelLimitOrder(base: string, quote: string, orderId: number): Promise<T>;
    /**
     * Cancel several limit orders at once
     * @param orderBookId base and quote addresses
     * @param orderIds array ids
     */
    cancelLimitOrderBatch(base: string, quote: string, orderIds: number[]): Promise<T>;
}
