"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SystemModule = void 0;
var _rxjs = require("rxjs");
var _math = require("@sora-substrate/math");
class SystemModule {
  constructor(root) {
    this.root = root;
    this.subject = new _rxjs.Subject();
    this.updated = this.subject.asObservable();
  }
  get specVersion() {
    return this.root.api.consts.system.version.specVersion.toNumber();
  }
  getChainDecimals() {
    let api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.api;
    return api.registry.chainDecimals[0];
  }
  getNetworkFeeMultiplierObservable() {
    let apiRx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.apiRx;
    return apiRx.query.xorFee.multiplier().pipe((0, _rxjs.map)(codec => new _math.FPNumber(codec).toNumber()));
  }
  getBlockNumberObservable() {
    let apiRx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.apiRx;
    return apiRx.query.system.number().pipe((0, _rxjs.map)(codec => {
      const blockNumber = codec.toNumber();
      this.subject.next(blockNumber);
      return blockNumber;
    }));
  }
  getBlockHashObservable(blockNumber) {
    let apiRx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.apiRx;
    return apiRx.query.system.blockHash(blockNumber).pipe((0, _rxjs.map)(hash => {
      return hash.isEmpty ? null : hash.toString();
    }));
  }
  getRuntimeVersionObservable() {
    let apiRx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.apiRx;
    return apiRx.query.system.lastRuntimeUpgrade().pipe((0, _rxjs.map)(data => data.value.specVersion.toNumber()));
  }
  getEventsObservable() {
    let apiRx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root.apiRx;
    return apiRx.query.system.events();
  }
  async getBlockHash(blockNumber) {
    let api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.api;
    return (await api.rpc.chain.getBlockHash(blockNumber)).toString();
  }
  async getBlockNumber(blockHash) {
    let api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.api;
    const apiInstanceAtBlock = await api.at(blockHash);
    return (await apiInstanceAtBlock.query.system.number()).toNumber();
  }
  async getBlockTimestamp(blockHash) {
    let api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.api;
    const apiInstanceAtBlock = await api.at(blockHash);
    return (await apiInstanceAtBlock.query.timestamp.now()).toNumber();
  }
  async getExtrinsicsFromBlock(blockId) {
    var _signedBlock$block$ex, _signedBlock$block;
    let api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.api;
    const signedBlock = await api.rpc.chain.getBlock(blockId);
    return (_signedBlock$block$ex = (_signedBlock$block = signedBlock.block) === null || _signedBlock$block === void 0 ? void 0 : _signedBlock$block.extrinsics.toArray()) !== null && _signedBlock$block$ex !== void 0 ? _signedBlock$block$ex : [];
  }
  async getBlockEvents(blockId) {
    let api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.api;
    const apiInstanceAtBlock = await api.at(blockId);
    return (await apiInstanceAtBlock.query.system.events()).toArray();
  }
}
exports.SystemModule = SystemModule;