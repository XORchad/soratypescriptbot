import type { Observable } from '@polkadot/types/types';
import type { GenericExtrinsic } from '@polkadot/types';
import type { Vec } from '@polkadot/types-codec';
import type { AnyTuple } from '@polkadot/types-codec/types';
import type { FrameSystemEventRecord } from '@polkadot/types/lookup';
import type { Api } from '../api';
export declare class SystemModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    private subject;
    updated: Observable<number>;
    get specVersion(): number;
    getChainDecimals(api?: import("@polkadot/api").ApiPromise): number;
    getNetworkFeeMultiplierObservable(apiRx?: import("@polkadot/api").ApiRx): Observable<number>;
    getBlockNumberObservable(apiRx?: import("@polkadot/api").ApiRx): Observable<number>;
    getBlockHashObservable(blockNumber: number, apiRx?: import("@polkadot/api").ApiRx): Observable<string | null>;
    getRuntimeVersionObservable(apiRx?: import("@polkadot/api").ApiRx): Observable<number>;
    getEventsObservable(apiRx?: import("@polkadot/api").ApiRx): Observable<Vec<FrameSystemEventRecord>>;
    getBlockHash(blockNumber: number, api?: import("@polkadot/api").ApiPromise): Promise<string>;
    getBlockNumber(blockHash: string, api?: import("@polkadot/api").ApiPromise): Promise<number>;
    getBlockTimestamp(blockHash: string, api?: import("@polkadot/api").ApiPromise): Promise<number>;
    getExtrinsicsFromBlock(blockId: string, api?: import("@polkadot/api").ApiPromise): Promise<Array<GenericExtrinsic<AnyTuple>>>;
    getBlockEvents(blockId: string, api?: import("@polkadot/api").ApiPromise): Promise<Array<FrameSystemEventRecord>>;
}
