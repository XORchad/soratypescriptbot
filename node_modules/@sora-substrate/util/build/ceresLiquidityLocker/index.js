"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CeresLiquidityLockerModule = void 0;
var _rxjs = require("rxjs");
var _util = require("@polkadot/util");
var _math = require("@sora-substrate/math");
var _logger = require("../logger");
var _BaseApi = require("../BaseApi");
class CeresLiquidityLockerModule {
  constructor(root) {
    this.root = root;
  }

  /**
   * Get list of account locked pools
   * @param onlyActual get locked pools at that moment, not all the history
   */
  getLockerDataObservable() {
    let onlyActual = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    (0, _util.assert)(this.root.account, _logger.Messages.connectWallet);
    return this.root.apiRx.query.ceresLiquidityLocker.lockerData(this.root.account.pair.address).pipe((0, _rxjs.map)(lockedData => {
      const infos = [...lockedData.values()].map(value => {
        return {
          poolTokens: new _math.FPNumber(value.poolTokens),
          unlockingTimestamp: value.unlockingTimestamp.toNumber(),
          assetA: value.assetA.code.toString(),
          assetB: value.assetB.code.toString()
        };
      });
      if (!onlyActual) return infos;
      const currentTimestamp = Date.now();
      return infos.filter(info => info.unlockingTimestamp >= currentTimestamp);
    }));
  }

  /**
   * Lock account liquidity
   * @param baseAsset pool base asset
   * @param poolAsset pool target asset
   * @param unlockingTimestamp timestamp to unlock
   * @param percentageOfPoolTokens percent of pooled tokens (from 0 to 100)
   * @param option pay locker fees, otherwise to ceres team
   */
  async lockLiquidity(baseAsset, poolAsset, unlockingTimestamp, percentageOfPoolTokens) {
    let option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    (0, _util.assert)(this.root.account, _logger.Messages.connectWallet);
    const percent = new _math.FPNumber(percentageOfPoolTokens).div(_math.FPNumber.HUNDRED).toCodecString();
    return this.root.submitExtrinsic(this.root.api.tx.ceresLiquidityLocker.lockLiquidity(baseAsset.address, poolAsset.address, unlockingTimestamp, percent, option), this.root.account.pair, {
      type: _BaseApi.Operation.CeresLiquidityLockerLockLiquidity,
      symbol: baseAsset.symbol,
      assetAddress: baseAsset.address,
      symbol2: poolAsset.symbol,
      asset2Address: poolAsset.address
    });
  }
}
exports.CeresLiquidityLockerModule = CeresLiquidityLockerModule;