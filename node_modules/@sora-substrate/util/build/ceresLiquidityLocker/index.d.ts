import type { Observable } from '@polkadot/types/types';
import type { Api } from '../api';
import type { AccountAsset, Asset } from '../assets/types';
import type { AccountLockedPool } from './types';
export declare class CeresLiquidityLockerModule<T> {
    private readonly root;
    constructor(root: Api<T>);
    /**
     * Get list of account locked pools
     * @param onlyActual get locked pools at that moment, not all the history
     */
    getLockerDataObservable(onlyActual?: boolean): Observable<AccountLockedPool[]>;
    /**
     * Lock account liquidity
     * @param baseAsset pool base asset
     * @param poolAsset pool target asset
     * @param unlockingTimestamp timestamp to unlock
     * @param percentageOfPoolTokens percent of pooled tokens (from 0 to 100)
     * @param option pay locker fees, otherwise to ceres team
     */
    lockLiquidity(baseAsset: Asset | AccountAsset, poolAsset: Asset | AccountAsset, unlockingTimestamp: number, percentageOfPoolTokens: number, option?: boolean): Promise<T>;
}
