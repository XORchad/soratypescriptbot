"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FaucetApi = void 0;
var _util = require("@polkadot/util");
var _uiKeyring = _interopRequireDefault(require("@polkadot/ui-keyring"));
var _math = require("@sora-substrate/math");
var _BaseApi = require("./BaseApi");
var _assets = require("./assets");
var _consts = require("./assets/consts");
var _logger = require("./logger");
/**
 * Contains all necessary data and functions for the faucet
 */
class FaucetApi extends _BaseApi.BaseApi {
  constructor() {
    let withKeyringLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    super();
    // Fake account initialization
    this.fausetSignerSeed = 'fuel start grant tackle void tree unusual teach grocery jar pulp weird';
    this.faucetSignerName = 'Faucet Signer';
    this.faucetSignerPassword = 'qwaszx';
    this.faucetSigner = void 0;
    if (withKeyringLoading) {
      _uiKeyring.default.loadAll({
        type: _BaseApi.KeyringType
      });
    }
    this.faucetSigner = _uiKeyring.default.addUri(this.fausetSignerSeed, this.faucetSignerPassword, {
      name: this.faucetSignerName
    }, _BaseApi.KeyringType);
    this.setAccount(this.faucetSigner);
  }

  /**
   * **NOT USED** will be removed soon, seems that we don't need it
   * @param assetAddress
   * @param accountAddress
   * @returns balance = value * 10 ^ decimals
   */
  async getBalance(assetAddress, accountAddress) {
    const asset = _consts.KnownAssets.get(assetAddress);
    const result = await (0, _assets.getBalance)(this.api, accountAddress, assetAddress);
    return new _math.FPNumber(result, asset.decimals).toCodecString();
  }
  send(assetAddress, accountAddress, amount) {
    (0, _util.assert)(!!this.faucetSigner, _logger.Messages.connectWallet);
    const asset = _consts.KnownAssets.get(assetAddress);
    // For now it will be signed transaction with the fake account
    return this.submitExtrinsic(this.api.tx.faucet.transfer(assetAddress, accountAddress, new _math.FPNumber(amount, asset.decimals).toCodecString()), this.faucetSigner.pair, {
      type: _BaseApi.Operation.Faucet,
      amount: `${amount}`,
      symbol: asset.symbol,
      from: accountAddress
    });
  }
}
exports.FaucetApi = FaucetApi;