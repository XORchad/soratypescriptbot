"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.options = exports.defaultOptions = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _ormlApiDerive = require("@open-web3/orml-api-derive");
var _types = require("@sora-substrate/types");
const _excluded = ["types", "rpc", "typesAlias", "typesBundle"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const defaultOptions = {
  types: _types.types,
  rpc: _types.rpc
};
exports.defaultOptions = defaultOptions;
const options = function () {
  var _soraTypesBundle$spec, _typesBundle$spec;
  let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let {
      types = {},
      rpc = {},
      typesAlias = {},
      typesBundle = {}
    } = _ref,
    otherOptions = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return _objectSpread({
    types: _objectSpread(_objectSpread({}, _types.types), types),
    rpc: _objectSpread(_objectSpread({}, _types.rpc), rpc),
    typesAlias: _objectSpread(_objectSpread({}, _types.typesAlias), typesAlias),
    derives: _objectSpread({}, _ormlApiDerive.derive),
    typesBundle: _objectSpread(_objectSpread({}, typesBundle), {}, {
      spec: _objectSpread(_objectSpread({}, typesBundle.spec), {}, {
        sora: _objectSpread(_objectSpread({}, _types.typesBundle === null || _types.typesBundle === void 0 ? void 0 : (_soraTypesBundle$spec = _types.typesBundle.spec) === null || _soraTypesBundle$spec === void 0 ? void 0 : _soraTypesBundle$spec.sora), typesBundle === null || typesBundle === void 0 ? void 0 : (_typesBundle$spec = typesBundle.spec) === null || _typesBundle$spec === void 0 ? void 0 : _typesBundle$spec.sora)
      })
    }),
    signedExtensions: {
      ChargeTransactionPayment2: {
        extrinsic: {
          charge_fee_info: 'ChargeFeeInfo'
        },
        payload: {}
      }
    }
  }, otherOptions);
};
exports.options = options;