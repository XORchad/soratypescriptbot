"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RewardReason = exports.PriceVariant = exports.LiquiditySourceTypes = exports.Errors = exports.Consts = exports.AssetType = void 0;
var _math = require("@sora-substrate/math");
class Consts {}
exports.Consts = Consts;
Consts.XOR = '0x0200000000000000000000000000000000000000000000000000000000000000';
Consts.VAL = '0x0200040000000000000000000000000000000000000000000000000000000000';
Consts.PSWAP = '0x0200050000000000000000000000000000000000000000000000000000000000';
Consts.DAI = '0x0200060000000000000000000000000000000000000000000000000000000000';
Consts.ETH = '0x0200070000000000000000000000000000000000000000000000000000000000';
Consts.XSTUSD = '0x0200080000000000000000000000000000000000000000000000000000000000';
Consts.XST = '0x0200090000000000000000000000000000000000000000000000000000000000';
Consts.TBCD = '0x02000a0000000000000000000000000000000000000000000000000000000000';
Consts.XYK_FEE = new _math.FPNumber(0.003);
Consts.TBC_FEE = Consts.XYK_FEE;
Consts.MAX = new _math.FPNumber('170141183460469231731.687303715884105727');
Consts.incentivizedCurrenciesNum = new _math.FPNumber(2);
Consts.initialPswapTbcRewardsAmount = new _math.FPNumber(2500000000);
let Errors;
exports.Errors = Errors;
(function (Errors) {
  Errors["UnknownOrderBook"] = "Order book does not exist for this trading pair";
  Errors["NotEnoughLiquidityInOrderBook"] = "Not Enough Liquidity In OrderBook";
  Errors["InvalidOrderAmount"] = "Invalid Order Amount";
})(Errors || (exports.Errors = Errors = {}));
let LiquiditySourceTypes;
exports.LiquiditySourceTypes = LiquiditySourceTypes;
(function (LiquiditySourceTypes) {
  LiquiditySourceTypes["Default"] = "";
  LiquiditySourceTypes["XYKPool"] = "XYKPool";
  LiquiditySourceTypes["XSTPool"] = "XSTPool";
  LiquiditySourceTypes["MulticollateralBondingCurvePool"] = "MulticollateralBondingCurvePool";
  LiquiditySourceTypes["OrderBook"] = "OrderBook";
})(LiquiditySourceTypes || (exports.LiquiditySourceTypes = LiquiditySourceTypes = {}));
let RewardReason;
exports.RewardReason = RewardReason;
(function (RewardReason) {
  RewardReason["Unspecified"] = "Unspecified";
  RewardReason["BuyOnBondingCurve"] = "BuyOnBondingCurve";
})(RewardReason || (exports.RewardReason = RewardReason = {}));
let PriceVariant;
exports.PriceVariant = PriceVariant;
(function (PriceVariant) {
  PriceVariant["Buy"] = "Buy";
  PriceVariant["Sell"] = "Sell";
})(PriceVariant || (exports.PriceVariant = PriceVariant = {}));
let AssetType;
exports.AssetType = AssetType;
(function (AssetType) {
  AssetType["Base"] = "Base";
  AssetType["SyntheticBase"] = "SyntheticBase";
  AssetType["Basic"] = "Basic";
  AssetType["Synthetic"] = "Synthetic";
})(AssetType || (exports.AssetType = AssetType = {}));