import { FPNumber } from '@sora-substrate/math';
import { LiquiditySourceTypes } from './consts';
import type { QuotePayload, SwapResult, PrimaryMarketsEnabledAssets, PathsAndPairLiquiditySources } from './types';
/**
 * Get possible exchange routes between two assets
 * @param baseAssetId Dex base asset id
 * @param syntheticBaseAssetId Dex synthetic base asset id
 * @param syntheticAssets collateral synthetic assets
 * @param inputAssetId input asset id
 * @param outputAssetId output asset id
 */
export declare const newTrivial: (baseAssetId: string, syntheticBaseAssetId: string, syntheticAssets: string[], inputAssetId: string, outputAssetId: string) => string[][];
/**
 * Get available liquidity sources for the tokens & exchange pair\
 * @param inputAssetId Input asset address
 * @param outputAssetId Output asset address
 * @param enabledAssets List of enabled assets
 * @param xykReserves Xyk reserves of assets in exchange paths
 * @param baseAssetId Dex base asset id
 * @param syntheticBaseAssetId Dex synthetic base asset id
 */
export declare const getAssetsLiquiditySources: (baseAssetId: string, syntheticBaseAssetId: string, exchangePaths: string[][], enabledAssets: PrimaryMarketsEnabledAssets, xykReserves: QuotePayload['reserves']['xyk'], orderBookReserves: QuotePayload['reserves']['orderBook']) => PathsAndPairLiquiditySources;
export declare const quote: (firstAssetAddress: string, secondAssetAddress: string, amount: FPNumber, isDesiredInput: boolean, selectedSources: Array<LiquiditySourceTypes>, payload: QuotePayload, deduceFee: boolean, baseAssetId?: string, syntheticBaseAssetId?: string) => SwapResult;
