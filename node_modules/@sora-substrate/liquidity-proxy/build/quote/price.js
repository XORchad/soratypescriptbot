"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAveragePrice = void 0;
var _math = require("@sora-substrate/math");
var _consts = require("../consts");
var _utils = require("../utils");
const getAssetAveragePrice = (assetId, priceVariant, payload) => {
  return _math.FPNumber.fromCodecValue(payload.prices[assetId][priceVariant]);
};
const getAveragePrice = (inputAssetId, outputAssetId, priceVariant, payload) => {
  if (inputAssetId === outputAssetId) return _math.FPNumber.ONE;
  if (inputAssetId === _consts.Consts.XOR) {
    const averagePrice = getAssetAveragePrice(outputAssetId, priceVariant, payload);
    return averagePrice;
  } else if (outputAssetId === _consts.Consts.XOR) {
    // Buy price should always be greater or equal to sell price, so we need to invert price_variant here
    const priceVariantInverted = priceVariant === _consts.PriceVariant.Buy ? _consts.PriceVariant.Sell : _consts.PriceVariant.Buy;
    const averagePrice = getAssetAveragePrice(inputAssetId, priceVariantInverted, payload);
    return (0, _utils.safeDivide)(_math.FPNumber.ONE, averagePrice);
  } else {
    const quoteA = getAveragePrice(inputAssetId, _consts.Consts.XOR, priceVariant, payload);
    const quoteB = getAveragePrice(_consts.Consts.XOR, outputAssetId, priceVariant, payload);
    return quoteA.mul(quoteB);
  }
};
exports.getAveragePrice = getAveragePrice;