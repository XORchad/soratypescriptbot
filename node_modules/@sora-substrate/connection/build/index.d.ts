import { ApiPromise } from '@polkadot/api';
import type { ApiInterfaceEvents, ApiOptions } from '@polkadot/api/types';
import type { ProviderInterfaceEmitCb } from '@polkadot/rpc-provider/types';
declare type ConnectionEventListener = [ApiInterfaceEvents, ProviderInterfaceEmitCb];
export interface ConnectionRunOptions {
    once?: boolean;
    timeout?: number;
    autoConnectMs?: number;
    eventListeners?: ConnectionEventListener[];
}
declare class Connection {
    private readonly apiOptions;
    api: ApiPromise | null;
    endpoint: string;
    loading: boolean;
    private eventListeners;
    constructor(apiOptions: ApiOptions);
    private withLoading;
    private run;
    private stop;
    addEventListener(eventName: ApiInterfaceEvents, eventHandler: ProviderInterfaceEmitCb): void;
    get opened(): boolean;
    /**
     * Open connection
     * @param endpoint address of node
     * @param options
     */
    open(endpoint?: string, options?: ConnectionRunOptions): Promise<void>;
    /**
     * Close connection
     */
    close(): Promise<void>;
}
/**
 * Base SORA connection object
 */
declare const connection: Connection;
export { connection, Connection };
