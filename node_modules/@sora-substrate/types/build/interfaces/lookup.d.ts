declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, pallet_balances::AccountData<Balance>>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: pallet_balances::AccountData<Balance>
     **/
    PalletBalancesAccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    /**
     * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
     **/
    FrameSupportDispatchPerDispatchClassWeight: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup8: sp_weights::weight_v2::Weight
     **/
    SpWeightsWeightV2Weight: {
        refTime: string;
        proofSize: string;
    };
    /**
     * Lookup13: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup15: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup18: frame_system::EventRecord<framenode_runtime::RuntimeEvent, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup20: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup21: frame_support::dispatch::DispatchInfo
     **/
    FrameSupportDispatchDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup22: frame_support::dispatch::DispatchClass
     **/
    FrameSupportDispatchDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup23: frame_support::dispatch::Pays
     **/
    FrameSupportDispatchPays: {
        _enum: string[];
    };
    /**
     * Lookup24: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
            Exhausted: string;
            Corruption: string;
            Unavailable: string;
        };
    };
    /**
     * Lookup25: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup26: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup27: sp_arithmetic::ArithmeticError
     **/
    SpArithmeticArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup28: sp_runtime::TransactionalError
     **/
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /**
     * Lookup29: pallet_balances::pallet::Event<T, I>
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: {
                account: string;
                freeBalance: string;
            };
            DustLost: {
                account: string;
                amount: string;
            };
            Transfer: {
                from: string;
                to: string;
                amount: string;
            };
            BalanceSet: {
                who: string;
                free: string;
                reserved: string;
            };
            Reserved: {
                who: string;
                amount: string;
            };
            Unreserved: {
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                from: string;
                to: string;
                amount: string;
                destinationStatus: string;
            };
            Deposit: {
                who: string;
                amount: string;
            };
            Withdraw: {
                who: string;
                amount: string;
            };
            Slashed: {
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup30: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup31: pallet_transaction_payment::pallet::Event<T>
     **/
    PalletTransactionPaymentEvent: {
        _enum: {
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                tip: string;
            };
        };
    };
    /**
     * Lookup32: permissions::pallet::Event<T>
     **/
    PermissionsEvent: {
        _enum: {
            PermissionGranted: string;
            PermissionTransfered: string;
            PermissionCreated: string;
            PermissionAssigned: string;
        };
    };
    /**
     * Lookup33: rewards::pallet::Event<T>
     **/
    RewardsEvent: {
        _enum: {
            Claimed: string;
            MigrationCompleted: string;
        };
    };
    /**
     * Lookup34: xor_fee::pallet::Event<T>
     **/
    XorFeeEvent: {
        _enum: {
            FeeWithdrawn: string;
            ReferrerRewarded: string;
            WeightToFeeMultiplierUpdated: string;
        };
    };
    /**
     * Lookup36: pallet_multisig::pallet::Event<T>
     **/
    PalletMultisigEvent: {
        _enum: {
            MultisigAccountCreated: string;
            NewMultisig: string;
            MultisigApproval: string;
            MultisigExecuted: string;
            MultisigCancelled: string;
        };
    };
    /**
     * Lookup37: pallet_multisig::BridgeTimepoint<BlockNumber>
     **/
    PalletMultisigBridgeTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup38: pallet_multisig::MultiChainHeight<BlockNumber>
     **/
    PalletMultisigMultiChainHeight: {
        _enum: {
            Thischain: string;
            Sidechain: string;
        };
    };
    /**
     * Lookup40: pallet_utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
        };
    };
    /**
     * Lookup43: pallet_staking::pallet::pallet::Event<T>
     **/
    PalletStakingPalletEvent: {
        _enum: {
            EraPaid: {
                eraIndex: string;
                validatorPayout: string;
            };
            Rewarded: {
                stash: string;
                amount: string;
            };
            Slashed: {
                staker: string;
                amount: string;
            };
            SlashReported: {
                validator: string;
                fraction: string;
                slashEra: string;
            };
            OldSlashingReportDiscarded: {
                sessionIndex: string;
            };
            StakersElected: string;
            Bonded: {
                stash: string;
                amount: string;
            };
            Unbonded: {
                stash: string;
                amount: string;
            };
            Withdrawn: {
                stash: string;
                amount: string;
            };
            Kicked: {
                nominator: string;
                stash: string;
            };
            StakingElectionFailed: string;
            Chilled: {
                stash: string;
            };
            PayoutStarted: {
                eraIndex: string;
                validatorStash: string;
            };
            ValidatorPrefsSet: {
                stash: string;
                prefs: string;
            };
            ForceEra: {
                mode: string;
            };
        };
    };
    /**
     * Lookup45: pallet_staking::ValidatorPrefs
     **/
    PalletStakingValidatorPrefs: {
        commission: string;
        blocked: string;
    };
    /**
     * Lookup48: pallet_staking::Forcing
     **/
    PalletStakingForcing: {
        _enum: string[];
    };
    /**
     * Lookup49: pallet_offences::pallet::Event
     **/
    PalletOffencesEvent: {
        _enum: {
            Offence: {
                kind: string;
                timeslot: string;
            };
        };
    };
    /**
     * Lookup51: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup52: pallet_grandpa::pallet::Event
     **/
    PalletGrandpaEvent: {
        _enum: {
            NewAuthorities: {
                authoritySet: string;
            };
            Paused: string;
            Resumed: string;
        };
    };
    /**
     * Lookup55: sp_finality_grandpa::app::Public
     **/
    SpFinalityGrandpaAppPublic: string;
    /**
     * Lookup56: sp_core::ed25519::Public
     **/
    SpCoreEd25519Public: string;
    /**
     * Lookup57: pallet_im_online::pallet::Event<T>
     **/
    PalletImOnlineEvent: {
        _enum: {
            HeartbeatReceived: {
                authorityId: string;
            };
            AllGood: string;
            SomeOffline: {
                offline: string;
            };
        };
    };
    /**
     * Lookup58: pallet_im_online::sr25519::app_sr25519::Public
     **/
    PalletImOnlineSr25519AppSr25519Public: string;
    /**
     * Lookup59: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup62: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingExposure: {
        total: string;
        own: string;
        others: string;
    };
    /**
     * Lookup65: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingIndividualExposure: {
        who: string;
        value: string;
    };
    /**
     * Lookup66: orml_tokens::module::Event<T>
     **/
    OrmlTokensModuleEvent: {
        _enum: {
            Endowed: {
                currencyId: string;
                who: string;
                amount: string;
            };
            DustLost: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Transfer: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
            };
            Reserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Unreserved: {
                currencyId: string;
                who: string;
                amount: string;
            };
            ReserveRepatriated: {
                currencyId: string;
                from: string;
                to: string;
                amount: string;
                status: string;
            };
            BalanceSet: {
                currencyId: string;
                who: string;
                free: string;
                reserved: string;
            };
            TotalIssuanceSet: {
                currencyId: string;
                amount: string;
            };
            Withdrawn: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Slashed: {
                currencyId: string;
                who: string;
                freeAmount: string;
                reservedAmount: string;
            };
            Deposited: {
                currencyId: string;
                who: string;
                amount: string;
            };
            LockSet: {
                lockId: string;
                currencyId: string;
                who: string;
                amount: string;
            };
            LockRemoved: {
                lockId: string;
                currencyId: string;
                who: string;
            };
            Locked: {
                currencyId: string;
                who: string;
                amount: string;
            };
            Unlocked: {
                currencyId: string;
                who: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup67: common::primitives::AssetId32<common::primitives::PredefinedAssetId>
     **/
    CommonPrimitivesAssetId32: {
        code: string;
    };
    /**
     * Lookup68: common::primitives::PredefinedAssetId
     **/
    CommonPrimitivesPredefinedAssetId: {
        _enum: string[];
    };
    /**
     * Lookup70: trading_pair::pallet::Event<T>
     **/
    TradingPairEvent: {
        _enum: {
            TradingPairStored: string;
        };
    };
    /**
     * Lookup71: common::primitives::TradingPair<common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    CommonPrimitivesTradingPairAssetId32: {
        baseAssetId: string;
        targetAssetId: string;
    };
    /**
     * Lookup72: assets::pallet::Event<T>
     **/
    AssetsEvent: {
        _enum: {
            AssetRegistered: string;
            Transfer: string;
            Mint: string;
            Burn: string;
            AssetSetNonMintable: string;
            AssetUpdated: string;
        };
    };
    /**
     * Lookup77: multicollateral_bonding_curve_pool::pallet::Event<T>
     **/
    MulticollateralBondingCurvePoolEvent: {
        _enum: {
            PoolInitialized: string;
            ReferenceAssetChanged: string;
            OptionalRewardMultiplierUpdated: string;
            PriceBiasChanged: string;
            PriceChangeConfigChanged: string;
        };
    };
    /**
     * Lookup79: fixnum::FixedPoint<I, P>
     **/
    FixnumFixedPoint: {
        inner: string;
    };
    /**
     * Lookup81: technical::pallet::Event<T>
     **/
    TechnicalEvent: {
        _enum: {
            Minted: string;
            Burned: string;
            OutputTransferred: string;
            InputTransferred: string;
            SwapSuccess: string;
        };
    };
    /**
     * Lookup82: common::primitives::TechAssetId<common::primitives::PredefinedAssetId>
     **/
    CommonPrimitivesTechAssetId: {
        _enum: {
            Wrapped: string;
            Escaped: string;
        };
    };
    /**
     * Lookup83: common::primitives::TechAccountId<sp_core::crypto::AccountId32, common::primitives::TechAssetId<common::primitives::PredefinedAssetId>, DEXId>
     **/
    CommonPrimitivesTechAccountId: {
        _enum: {
            Pure: string;
            Generic: string;
            Wrapped: string;
            WrappedRepr: string;
            None: string;
        };
    };
    /**
     * Lookup84: common::primitives::TechPurpose<common::primitives::TechAssetId<common::primitives::PredefinedAssetId>>
     **/
    CommonPrimitivesTechPurpose: {
        _enum: {
            FeeCollector: string;
            FeeCollectorForPair: string;
            XykLiquidityKeeper: string;
            Identifier: string;
            OrderBookLiquidityKeeper: string;
        };
    };
    /**
     * Lookup85: common::primitives::TradingPair<common::primitives::TechAssetId<common::primitives::PredefinedAssetId>>
     **/
    CommonPrimitivesTradingPairTechAssetId: {
        baseAssetId: string;
        targetAssetId: string;
    };
    /**
     * Lookup86: pool_xyk::pallet::Event<T>
     **/
    PoolXykEvent: {
        _enum: {
            PoolIsInitialized: string;
        };
    };
    /**
     * Lookup87: liquidity_proxy::pallet::Event<T>
     **/
    LiquidityProxyEvent: {
        _enum: {
            Exchange: string;
            LiquiditySourceEnabled: string;
            LiquiditySourceDisabled: string;
            BatchSwapExecuted: string;
            XorlessTransfer: string;
        };
    };
    /**
     * Lookup89: common::primitives::LiquiditySourceId<DEXId, common::primitives::LiquiditySourceType>
     **/
    CommonPrimitivesLiquiditySourceId: {
        dexId: string;
        liquiditySourceIndex: string;
    };
    /**
     * Lookup90: common::primitives::LiquiditySourceType
     **/
    CommonPrimitivesLiquiditySourceType: {
        _enum: string[];
    };
    /**
     * Lookup93: pallet_collective::pallet::Event<T, I>
     **/
    PalletCollectiveEvent: {
        _enum: {
            Proposed: {
                account: string;
                proposalIndex: string;
                proposalHash: string;
                threshold: string;
            };
            Voted: {
                account: string;
                proposalHash: string;
                voted: string;
                yes: string;
                no: string;
            };
            Approved: {
                proposalHash: string;
            };
            Disapproved: {
                proposalHash: string;
            };
            Executed: {
                proposalHash: string;
                result: string;
            };
            MemberExecuted: {
                proposalHash: string;
                result: string;
            };
            Closed: {
                proposalHash: string;
                yes: string;
                no: string;
            };
        };
    };
    /**
     * Lookup95: pallet_democracy::pallet::Event<T>
     **/
    PalletDemocracyEvent: {
        _enum: {
            Proposed: {
                proposalIndex: string;
                deposit: string;
            };
            Tabled: {
                proposalIndex: string;
                deposit: string;
            };
            ExternalTabled: string;
            Started: {
                refIndex: string;
                threshold: string;
            };
            Passed: {
                refIndex: string;
            };
            NotPassed: {
                refIndex: string;
            };
            Cancelled: {
                refIndex: string;
            };
            Delegated: {
                who: string;
                target: string;
            };
            Undelegated: {
                account: string;
            };
            Vetoed: {
                who: string;
                proposalHash: string;
                until: string;
            };
            Blacklisted: {
                proposalHash: string;
            };
            Voted: {
                voter: string;
                refIndex: string;
                vote: string;
            };
            Seconded: {
                seconder: string;
                propIndex: string;
            };
            ProposalCanceled: {
                propIndex: string;
            };
        };
    };
    /**
     * Lookup96: pallet_democracy::vote_threshold::VoteThreshold
     **/
    PalletDemocracyVoteThreshold: {
        _enum: string[];
    };
    /**
     * Lookup97: pallet_democracy::vote::AccountVote<Balance>
     **/
    PalletDemocracyVoteAccountVote: {
        _enum: {
            Standard: {
                vote: string;
                balance: string;
            };
            Split: {
                aye: string;
                nay: string;
            };
        };
    };
    /**
     * Lookup99: eth_bridge::pallet::Event<T>
     **/
    EthBridgeEvent: {
        _enum: {
            RequestRegistered: string;
            ApprovalsCollected: string;
            RequestFinalizationFailed: string;
            IncomingRequestFinalizationFailed: string;
            IncomingRequestFinalized: string;
            RequestAborted: string;
            CancellationFailed: string;
            RegisterRequestFailed: string;
        };
    };
    /**
     * Lookup100: pswap_distribution::pallet::Event<T>
     **/
    PswapDistributionEvent: {
        _enum: {
            FeesExchanged: string;
            FeesExchangeFailed: string;
            IncentiveDistributed: string;
            IncentiveDistributionFailed: string;
            BurnRateChanged: string;
            NothingToExchange: string;
            NothingToDistribute: string;
            IncentivesBurnedAfterExchange: string;
        };
    };
    /**
     * Lookup102: pallet_multisig::Timepoint<BlockNumber>
     **/
    PalletMultisigTimepoint: {
        height: string;
        index: string;
    };
    /**
     * Lookup103: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallUnavailable: {
                task: string;
                id: string;
            };
            PeriodicFailed: {
                task: string;
                id: string;
            };
            PermanentlyOverweight: {
                task: string;
                id: string;
            };
        };
    };
    /**
     * Lookup106: iroha_migration::pallet::Event<T>
     **/
    IrohaMigrationEvent: {
        _enum: {
            Migrated: string;
        };
    };
    /**
     * Lookup108: pallet_membership::pallet::Event<T, I>
     **/
    PalletMembershipEvent: {
        _enum: string[];
    };
    /**
     * Lookup109: pallet_elections_phragmen::pallet::Event<T>
     **/
    PalletElectionsPhragmenEvent: {
        _enum: {
            NewTerm: {
                newMembers: string;
            };
            EmptyTerm: string;
            ElectionError: string;
            MemberKicked: {
                member: string;
            };
            Renounced: {
                candidate: string;
            };
            CandidateSlashed: {
                candidate: string;
                amount: string;
            };
            SeatHolderSlashed: {
                seatHolder: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup112: vested_rewards::pallet::Event<T>
     **/
    VestedRewardsEvent: {
        _enum: {
            RewardsVested: string;
            ActualDoesntMatchAvailable: string;
            FailedToSaveCalculatedReward: string;
            CrowdloanClaimed: string;
        };
    };
    /**
     * Lookup113: common::primitives::RewardReason
     **/
    CommonPrimitivesRewardReason: {
        _enum: string[];
    };
    /**
     * Lookup114: pallet_identity::pallet::Event<T>
     **/
    PalletIdentityEvent: {
        _enum: {
            IdentitySet: {
                who: string;
            };
            IdentityCleared: {
                who: string;
                deposit: string;
            };
            IdentityKilled: {
                who: string;
                deposit: string;
            };
            JudgementRequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementUnrequested: {
                who: string;
                registrarIndex: string;
            };
            JudgementGiven: {
                target: string;
                registrarIndex: string;
            };
            RegistrarAdded: {
                registrarIndex: string;
            };
            SubIdentityAdded: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRemoved: {
                sub: string;
                main: string;
                deposit: string;
            };
            SubIdentityRevoked: {
                sub: string;
                main: string;
                deposit: string;
            };
        };
    };
    /**
     * Lookup115: xst::pallet::Event<T>
     **/
    XstEvent: {
        _enum: {
            ReferenceAssetChanged: string;
            SyntheticAssetEnabled: string;
            SyntheticAssetDisabled: string;
            SyntheticAssetFeeChanged: string;
            SyntheticBaseAssetFloorPriceChanged: string;
            SyntheticAssetRemoved: string;
        };
    };
    /**
     * Lookup117: price_tools::pallet::Event<T>
     **/
    PriceToolsEvent: string;
    /**
     * Lookup118: ceres_staking::pallet::Event<T>
     **/
    CeresStakingEvent: {
        _enum: {
            Deposited: string;
            Withdrawn: string;
            RewardsChanged: string;
        };
    };
    /**
     * Lookup119: ceres_liquidity_locker::pallet::Event<T>
     **/
    CeresLiquidityLockerEvent: {
        _enum: {
            Locked: string;
        };
    };
    /**
     * Lookup120: ceres_token_locker::pallet::Event<T>
     **/
    CeresTokenLockerEvent: {
        _enum: {
            Locked: string;
            Withdrawn: string;
            FeeChanged: string;
        };
    };
    /**
     * Lookup121: ceres_governance_platform::pallet::Event<T>
     **/
    CeresGovernancePlatformEvent: {
        _enum: {
            Voted: string;
            Created: string;
            Withdrawn: string;
        };
    };
    /**
     * Lookup122: ceres_launchpad::pallet::Event<T>
     **/
    CeresLaunchpadEvent: {
        _enum: {
            ILOCreated: string;
            Contributed: string;
            EmergencyWithdrawn: string;
            ILOFinished: string;
            ClaimedLP: string;
            Claimed: string;
            FeeChanged: string;
            ClaimedPSWAP: string;
            WhitelistedContributor: string;
            WhitelistedIloOrganizer: string;
            RemovedWhitelistedContributor: string;
            RemovedWhitelistedIloOrganizer: string;
        };
    };
    /**
     * Lookup123: demeter_farming_platform::pallet::Event<T>
     **/
    DemeterFarmingPlatformEvent: {
        _enum: {
            TokenRegistered: string;
            PoolAdded: string;
            RewardWithdrawn: string;
            Withdrawn: string;
            PoolRemoved: string;
            Deposited: string;
            MultiplierChanged: string;
            DepositFeeChanged: string;
            TokenInfoChanged: string;
            TotalTokensChanged: string;
            InfoChanged: string;
        };
    };
    /**
     * Lookup124: pallet_bags_list::pallet::Event<T, I>
     **/
    PalletBagsListEvent: {
        _enum: {
            Rebagged: {
                who: string;
                from: string;
                to: string;
            };
            ScoreUpdated: {
                who: string;
                newScore: string;
            };
        };
    };
    /**
     * Lookup125: pallet_election_provider_multi_phase::pallet::Event<T>
     **/
    PalletElectionProviderMultiPhaseEvent: {
        _enum: {
            SolutionStored: {
                compute: string;
                origin: string;
                prevEjected: string;
            };
            ElectionFinalized: {
                compute: string;
                score: string;
            };
            ElectionFailed: string;
            Rewarded: {
                account: string;
                value: string;
            };
            Slashed: {
                account: string;
                value: string;
            };
            PhaseTransitioned: {
                from: string;
                to: string;
                round: string;
            };
        };
    };
    /**
     * Lookup126: pallet_election_provider_multi_phase::ElectionCompute
     **/
    PalletElectionProviderMultiPhaseElectionCompute: {
        _enum: string[];
    };
    /**
     * Lookup128: sp_npos_elections::ElectionScore
     **/
    SpNposElectionsElectionScore: {
        minimalStake: string;
        sumStake: string;
        sumStakeSquared: string;
    };
    /**
     * Lookup129: pallet_election_provider_multi_phase::Phase<Bn>
     **/
    PalletElectionProviderMultiPhasePhase: {
        _enum: {
            Off: string;
            Signed: string;
            Unsigned: string;
            Emergency: string;
        };
    };
    /**
     * Lookup131: band::pallet::Event<T, I>
     **/
    BandEvent: {
        _enum: {
            SymbolsRelayed: string;
            RelayersAdded: string;
            RelayersRemoved: string;
        };
    };
    /**
     * Lookup135: oracle_proxy::pallet::Event<T>
     **/
    OracleProxyEvent: {
        _enum: {
            OracleEnabled: string;
            OracleDisabled: string;
        };
    };
    /**
     * Lookup136: common::primitives::Oracle
     **/
    CommonPrimitivesOracle: {
        _enum: string[];
    };
    /**
     * Lookup137: hermes_governance_platform::pallet::Event<T>
     **/
    HermesGovernancePlatformEvent: {
        _enum: {
            Voted: string;
            Created: string;
            VoterFundsWithdrawn: string;
            CreatorFundsWithdrawn: string;
            MinimumHermesForVotingChanged: string;
            MinimumHermesForCreatingPollChanged: string;
        };
    };
    /**
     * Lookup142: pallet_preimage::pallet::Event<T>
     **/
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup143: order_book::pallet::Event<T>
     **/
    OrderBookEvent: {
        _enum: {
            OrderBookCreated: {
                orderBookId: string;
                creator: string;
            };
            OrderBookDeleted: {
                orderBookId: string;
            };
            OrderBookStatusChanged: {
                orderBookId: string;
                newStatus: string;
            };
            OrderBookUpdated: {
                orderBookId: string;
            };
            LimitOrderPlaced: {
                orderBookId: string;
                orderId: string;
                ownerId: string;
                side: string;
                price: string;
                amount: string;
                lifetime: string;
            };
            LimitOrderConvertedToMarketOrder: {
                orderBookId: string;
                ownerId: string;
                direction: string;
                amount: string;
            };
            LimitOrderIsSplitIntoMarketOrderAndLimitOrder: {
                orderBookId: string;
                ownerId: string;
                marketOrderDirection: string;
                marketOrderAmount: string;
                marketOrderAveragePrice: string;
                limitOrderId: string;
            };
            LimitOrderCanceled: {
                orderBookId: string;
                orderId: string;
                ownerId: string;
                reason: string;
            };
            ExpirationFailure: {
                orderBookId: string;
                orderId: string;
                error: string;
            };
            LimitOrderExecuted: {
                orderBookId: string;
                orderId: string;
                ownerId: string;
                side: string;
                price: string;
                amount: string;
            };
            LimitOrderFilled: {
                orderBookId: string;
                orderId: string;
                ownerId: string;
            };
            LimitOrderUpdated: {
                orderBookId: string;
                orderId: string;
                ownerId: string;
                newAmount: string;
            };
            MarketOrderExecuted: {
                orderBookId: string;
                ownerId: string;
                direction: string;
                amount: string;
                averagePrice: string;
                to: string;
            };
        };
    };
    /**
     * Lookup144: order_book::types::OrderBookId<common::primitives::AssetId32<common::primitives::PredefinedAssetId>, DEXId>
     **/
    OrderBookOrderBookId: {
        dexId: string;
        base: string;
        quote: string;
    };
    /**
     * Lookup145: order_book::types::OrderBookStatus
     **/
    OrderBookOrderBookStatus: {
        _enum: string[];
    };
    /**
     * Lookup146: common::primitives::PriceVariant
     **/
    CommonPrimitivesPriceVariant: {
        _enum: string[];
    };
    /**
     * Lookup147: common::balance_unit::BalanceUnit
     **/
    CommonBalanceUnit: {
        inner: string;
        isDivisible: string;
    };
    /**
     * Lookup148: order_book::types::OrderAmount
     **/
    OrderBookOrderAmount: {
        _enum: {
            Base: string;
            Quote: string;
        };
    };
    /**
     * Lookup149: order_book::types::CancelReason
     **/
    OrderBookCancelReason: {
        _enum: string[];
    };
    /**
     * Lookup150: leaf_provider::pallet::Event<T>
     **/
    LeafProviderEvent: string;
    /**
     * Lookup151: bridge_proxy::pallet::Event
     **/
    BridgeProxyEvent: {
        _enum: {
            RequestStatusUpdate: string;
            RefundFailed: string;
        };
    };
    /**
     * Lookup152: bridge_types::types::MessageStatus
     **/
    BridgeTypesMessageStatus: {
        _enum: string[];
    };
    /**
     * Lookup153: ethereum_light_client::pallet::Event<T>
     **/
    EthereumLightClientEvent: {
        _enum: {
            Finalized: string;
        };
    };
    /**
     * Lookup156: bridge_types::header::HeaderId
     **/
    BridgeTypesHeaderHeaderId: {
        _alias: {
            hash_: string;
        };
        number: string;
        hash_: string;
    };
    /**
     * Lookup157: bridge_inbound_channel::pallet::Event<T>
     **/
    BridgeInboundChannelEvent: string;
    /**
     * Lookup158: bridge_outbound_channel::pallet::Event<T>
     **/
    BridgeOutboundChannelEvent: {
        _enum: {
            MessageAccepted: string;
        };
    };
    /**
     * Lookup159: dispatch::pallet::Event<T, I>
     **/
    DispatchEvent: {
        _enum: {
            MessageDispatched: string;
            MessageRejected: string;
            MessageDecodeFailed: string;
        };
    };
    /**
     * Lookup160: bridge_types::types::MessageId
     **/
    BridgeTypesMessageId: {
        sender: string;
        receiver: string;
        batchNonce: string;
        messageNonce: string;
    };
    /**
     * Lookup161: bridge_types::GenericNetworkId
     **/
    BridgeTypesGenericNetworkId: {
        _enum: {
            EVM: string;
            Sub: string;
            EVMLegacy: string;
        };
    };
    /**
     * Lookup162: bridge_types::SubNetworkId
     **/
    BridgeTypesSubNetworkId: {
        _enum: {
            Mainnet: string;
            Kusama: string;
            Polkadot: string;
            Rococo: string;
            Custom: string;
        };
    };
    /**
     * Lookup164: eth_app::pallet::Event<T>
     **/
    EthAppEvent: {
        _enum: {
            Burned: string;
            Minted: string;
            Refunded: string;
        };
    };
    /**
     * Lookup167: erc20_app::pallet::Event<T>
     **/
    Erc20AppEvent: {
        _enum: {
            Burned: string;
            Minted: string;
            Refunded: string;
        };
    };
    /**
     * Lookup168: migration_app::pallet::Event<T>
     **/
    MigrationAppEvent: {
        _enum: {
            Erc20Migrated: string;
            SidechainMigrated: string;
            EthMigrated: string;
        };
    };
    /**
     * Lookup169: beefy_light_client::pallet::Event<T>
     **/
    BeefyLightClientEvent: {
        _enum: {
            VerificationSuccessful: string;
            NewMMRRoot: string;
            ValidatorRegistryUpdated: string;
        };
    };
    /**
     * Lookup170: substrate_bridge_channel::inbound::pallet::Event<T>
     **/
    SubstrateBridgeChannelInboundPalletEvent: string;
    /**
     * Lookup171: substrate_bridge_channel::outbound::pallet::Event<T>
     **/
    SubstrateBridgeChannelOutboundPalletEvent: {
        _enum: {
            MessageAccepted: {
                networkId: string;
                batchNonce: string;
                messageNonce: string;
            };
        };
    };
    /**
     * Lookup173: parachain_bridge_app::pallet::Event<T>
     **/
    ParachainBridgeAppEvent: {
        _enum: {
            Burned: string;
            Minted: string;
        };
    };
    /**
     * Lookup174: xcm::VersionedMultiLocation
     **/
    XcmVersionedMultiLocation: {
        _enum: {
            __Unused0: string;
            V2: string;
            __Unused2: string;
            V3: string;
        };
    };
    /**
     * Lookup175: xcm::v2::multilocation::MultiLocation
     **/
    XcmV2MultiLocation: {
        parents: string;
        interior: string;
    };
    /**
     * Lookup176: xcm::v2::multilocation::Junctions
     **/
    XcmV2MultilocationJunctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup177: xcm::v2::junction::Junction
     **/
    XcmV2Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: string;
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
        };
    };
    /**
     * Lookup179: xcm::v2::NetworkId
     **/
    XcmV2NetworkId: {
        _enum: {
            Any: string;
            Named: string;
            Polkadot: string;
            Kusama: string;
        };
    };
    /**
     * Lookup181: xcm::v2::BodyId
     **/
    XcmV2BodyId: {
        _enum: {
            Unit: string;
            Named: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
            Defense: string;
            Administration: string;
            Treasury: string;
        };
    };
    /**
     * Lookup182: xcm::v2::BodyPart
     **/
    XcmV2BodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /**
     * Lookup183: xcm::v3::multilocation::MultiLocation
     **/
    XcmV3MultiLocation: {
        parents: string;
        interior: string;
    };
    /**
     * Lookup184: xcm::v3::junctions::Junctions
     **/
    XcmV3Junctions: {
        _enum: {
            Here: string;
            X1: string;
            X2: string;
            X3: string;
            X4: string;
            X5: string;
            X6: string;
            X7: string;
            X8: string;
        };
    };
    /**
     * Lookup185: xcm::v3::junction::Junction
     **/
    XcmV3Junction: {
        _enum: {
            Parachain: string;
            AccountId32: {
                network: string;
                id: string;
            };
            AccountIndex64: {
                network: string;
                index: string;
            };
            AccountKey20: {
                network: string;
                key: string;
            };
            PalletInstance: string;
            GeneralIndex: string;
            GeneralKey: {
                length: string;
                data: string;
            };
            OnlyChild: string;
            Plurality: {
                id: string;
                part: string;
            };
            GlobalConsensus: string;
        };
    };
    /**
     * Lookup187: xcm::v3::junction::NetworkId
     **/
    XcmV3JunctionNetworkId: {
        _enum: {
            ByGenesis: string;
            ByFork: {
                blockNumber: string;
                blockHash: string;
            };
            Polkadot: string;
            Kusama: string;
            Westend: string;
            Rococo: string;
            Wococo: string;
            Ethereum: {
                chainId: string;
            };
            BitcoinCore: string;
            BitcoinCash: string;
        };
    };
    /**
     * Lookup188: xcm::v3::junction::BodyId
     **/
    XcmV3JunctionBodyId: {
        _enum: {
            Unit: string;
            Moniker: string;
            Index: string;
            Executive: string;
            Technical: string;
            Legislative: string;
            Judicial: string;
            Defense: string;
            Administration: string;
            Treasury: string;
        };
    };
    /**
     * Lookup189: xcm::v3::junction::BodyPart
     **/
    XcmV3JunctionBodyPart: {
        _enum: {
            Voice: string;
            Members: {
                count: string;
            };
            Fraction: {
                nom: string;
                denom: string;
            };
            AtLeastProportion: {
                nom: string;
                denom: string;
            };
            MoreThanProportion: {
                nom: string;
                denom: string;
            };
        };
    };
    /**
     * Lookup191: bridge_data_signer::pallet::Event<T>
     **/
    BridgeDataSignerEvent: {
        _enum: {
            Initialized: {
                networkId: string;
                peers: string;
            };
            AddedPeer: {
                networkId: string;
                peer: string;
            };
            RemovedPeer: {
                networkId: string;
                peer: string;
            };
            ApprovalAccepted: {
                networkId: string;
                data: string;
                signature: string;
            };
            Approved: {
                networkId: string;
                data: string;
                signatures: string;
            };
        };
    };
    /**
     * Lookup193: sp_core::ecdsa::Public
     **/
    SpCoreEcdsaPublic: string;
    /**
     * Lookup196: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup200: multisig_verifier::pallet::Event<T>
     **/
    MultisigVerifierEvent: {
        _enum: {
            NetworkInitialized: string;
            VerificationSuccessful: string;
            PeerAdded: string;
            PeerRemoved: string;
        };
    };
    /**
     * Lookup201: pallet_sudo::pallet::Event<T>
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: {
                sudoResult: string;
            };
            KeyChanged: {
                oldSudoer: string;
            };
            SudoAsDone: {
                sudoResult: string;
            };
        };
    };
    /**
     * Lookup202: faucet::pallet::Event<T>
     **/
    FaucetEvent: {
        _enum: {
            Transferred: string;
            LimitUpdated: string;
        };
    };
    /**
     * Lookup203: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup206: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup207: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup211: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup212: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup213: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup215: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup216: frame_support::dispatch::PerDispatchClass<T>
     **/
    FrameSupportDispatchPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup217: sp_weights::RuntimeDbWeight
     **/
    SpWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup218: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup223: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup226: sp_consensus_babe::app::Public
     **/
    SpConsensusBabeAppPublic: string;
    /**
     * Lookup229: sp_consensus_babe::digests::NextConfigDescriptor
     **/
    SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
            __Unused0: string;
            V1: {
                c: string;
                allowedSlots: string;
            };
        };
    };
    /**
     * Lookup231: sp_consensus_babe::AllowedSlots
     **/
    SpConsensusBabeAllowedSlots: {
        _enum: string[];
    };
    /**
     * Lookup235: sp_consensus_babe::digests::PreDigest
     **/
    SpConsensusBabeDigestsPreDigest: {
        _enum: {
            __Unused0: string;
            Primary: string;
            SecondaryPlain: string;
            SecondaryVRF: string;
        };
    };
    /**
     * Lookup236: sp_consensus_babe::digests::PrimaryPreDigest
     **/
    SpConsensusBabeDigestsPrimaryPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup238: sp_consensus_babe::digests::SecondaryPlainPreDigest
     **/
    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
        authorityIndex: string;
        slot: string;
    };
    /**
     * Lookup239: sp_consensus_babe::digests::SecondaryVRFPreDigest
     **/
    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup240: sp_consensus_babe::BabeEpochConfiguration
     **/
    SpConsensusBabeBabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    /**
     * Lookup241: pallet_babe::pallet::Call<T>
     **/
    PalletBabeCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            plan_config_change: {
                config: string;
            };
        };
    };
    /**
     * Lookup242: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
     **/
    SpConsensusSlotsEquivocationProof: {
        offender: string;
        slot: string;
        firstHeader: string;
        secondHeader: string;
    };
    /**
     * Lookup243: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
     **/
    SpRuntimeHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    /**
     * Lookup244: sp_runtime::traits::BlakeTwo256
     **/
    SpRuntimeBlakeTwo256: string;
    /**
     * Lookup245: sp_session::MembershipProof
     **/
    SpSessionMembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    /**
     * Lookup246: pallet_babe::pallet::Error<T>
     **/
    PalletBabeError: {
        _enum: string[];
    };
    /**
     * Lookup247: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup249: pallet_balances::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup250: pallet_balances::Reasons
     **/
    PalletBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup253: pallet_balances::ReserveData<ReserveIdentifier, Balance>
     **/
    PalletBalancesReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup255: pallet_balances::pallet::Error<T, I>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup257: pallet_transaction_payment::Releases
     **/
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /**
     * Lookup259: permissions::Scope
     **/
    PermissionsScope: {
        _enum: {
            Limited: string;
            Unlimited: string;
        };
    };
    /**
     * Lookup263: permissions::pallet::Call<T>
     **/
    PermissionsCall: string;
    /**
     * Lookup264: permissions::pallet::Error<T>
     **/
    PermissionsError: {
        _enum: string[];
    };
    /**
     * Lookup265: referrals::pallet::Call<T>
     **/
    ReferralsCall: {
        _enum: {
            reserve: {
                balance: string;
            };
            unreserve: {
                balance: string;
            };
            set_referrer: {
                referrer: string;
            };
        };
    };
    /**
     * Lookup266: referrals::pallet::Error<T>
     **/
    ReferralsError: {
        _enum: string[];
    };
    /**
     * Lookup267: rewards::RewardInfo
     **/
    RewardsRewardInfo: {
        claimable: string;
        total: string;
    };
    /**
     * Lookup271: rewards::pallet::Call<T>
     **/
    RewardsCall: {
        _enum: {
            claim: {
                signature: string;
            };
            add_umi_nft_receivers: {
                receivers: string;
            };
        };
    };
    /**
     * Lookup272: rewards::pallet::Error<T>
     **/
    RewardsError: {
        _enum: string[];
    };
    /**
     * Lookup273: xor_fee::pallet::Call<T>
     **/
    XorFeeCall: {
        _enum: {
            update_multiplier: {
                newMultiplier: string;
            };
        };
    };
    /**
     * Lookup274: pallet_multisig::MultisigAccount<sp_core::crypto::AccountId32>
     **/
    PalletMultisigMultisigAccount: {
        signatories: string;
        threshold: string;
    };
    /**
     * Lookup277: pallet_multisig::Multisig<BlockNumber, Balance, sp_core::crypto::AccountId32>
     **/
    PalletMultisigMultisig: {
        when: string;
        deposit: string;
        depositor: string;
        approvals: string;
    };
    /**
     * Lookup280: pallet_multisig::pallet::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            register_multisig: {
                signatories: string;
            };
            remove_signatory: {
                signatory: string;
            };
            add_signatory: {
                newMember: string;
            };
            as_multi_threshold_1: {
                id: string;
                call: string;
                timepoint: string;
            };
            as_multi: {
                id: string;
                maybeTimepoint: string;
                call: string;
                storeCall: string;
                maxWeight: string;
            };
            approve_as_multi: {
                id: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                id: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup282: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
            with_weight: {
                call: string;
                weight: string;
            };
        };
    };
    /**
     * Lookup284: framenode_runtime::OriginCaller
     **/
    FramenodeRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            __Unused4: string;
            Void: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            __Unused9: string;
            __Unused10: string;
            __Unused11: string;
            __Unused12: string;
            __Unused13: string;
            __Unused14: string;
            __Unused15: string;
            __Unused16: string;
            __Unused17: string;
            __Unused18: string;
            __Unused19: string;
            __Unused20: string;
            __Unused21: string;
            __Unused22: string;
            __Unused23: string;
            __Unused24: string;
            __Unused25: string;
            __Unused26: string;
            Council: string;
            TechnicalCommittee: string;
            __Unused29: string;
            __Unused30: string;
            __Unused31: string;
            __Unused32: string;
            __Unused33: string;
            __Unused34: string;
            __Unused35: string;
            __Unused36: string;
            __Unused37: string;
            __Unused38: string;
            __Unused39: string;
            __Unused40: string;
            __Unused41: string;
            __Unused42: string;
            __Unused43: string;
            __Unused44: string;
            __Unused45: string;
            __Unused46: string;
            __Unused47: string;
            __Unused48: string;
            __Unused49: string;
            __Unused50: string;
            __Unused51: string;
            __Unused52: string;
            __Unused53: string;
            __Unused54: string;
            __Unused55: string;
            __Unused56: string;
            __Unused57: string;
            __Unused58: string;
            __Unused59: string;
            __Unused60: string;
            __Unused61: string;
            __Unused62: string;
            __Unused63: string;
            __Unused64: string;
            __Unused65: string;
            __Unused66: string;
            __Unused67: string;
            __Unused68: string;
            __Unused69: string;
            __Unused70: string;
            __Unused71: string;
            __Unused72: string;
            __Unused73: string;
            __Unused74: string;
            __Unused75: string;
            __Unused76: string;
            __Unused77: string;
            __Unused78: string;
            __Unused79: string;
            __Unused80: string;
            __Unused81: string;
            __Unused82: string;
            __Unused83: string;
            __Unused84: string;
            __Unused85: string;
            __Unused86: string;
            __Unused87: string;
            __Unused88: string;
            __Unused89: string;
            __Unused90: string;
            __Unused91: string;
            __Unused92: string;
            __Unused93: string;
            __Unused94: string;
            __Unused95: string;
            __Unused96: string;
            __Unused97: string;
            Dispatch: {
                origin: string;
            };
            __Unused99: string;
            __Unused100: string;
            __Unused101: string;
            __Unused102: string;
            __Unused103: string;
            __Unused104: string;
            __Unused105: string;
            __Unused106: string;
            __Unused107: string;
            SubstrateDispatch: string;
        };
    };
    /**
     * Lookup285: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup286: pallet_collective::RawOrigin<sp_core::crypto::AccountId32, I>
     **/
    PalletCollectiveRawOrigin: {
        _enum: {
            Members: string;
            Member: string;
            _Phantom: string;
        };
    };
    /**
     * Lookup289: bridge_types::types::CallOriginOutput<primitive_types::U256, primitive_types::H256, bridge_types::evm::AdditionalEVMInboundData>
     **/
    BridgeTypesCallOriginOutputU256: {
        networkId: string;
        messageId: string;
        timepoint: string;
        additional: string;
    };
    /**
     * Lookup290: bridge_types::evm::AdditionalEVMInboundData
     **/
    BridgeTypesEvmAdditionalEVMInboundData: {
        source: string;
    };
    /**
     * Lookup291: bridge_types::GenericTimepoint
     **/
    BridgeTypesGenericTimepoint: {
        _enum: {
            EVM: string;
            Sora: string;
            Parachain: string;
            Pending: string;
            Unknown: string;
        };
    };
    /**
     * Lookup292: dispatch::RawOrigin<bridge_types::types::CallOriginOutput<bridge_types::SubNetworkId, primitive_types::H256, Additional>>
     **/
    DispatchRawOrigin: {
        origin: string;
    };
    /**
     * Lookup293: bridge_types::types::CallOriginOutput<bridge_types::SubNetworkId, primitive_types::H256, Additional>
     **/
    BridgeTypesCallOriginOutputSubNetworkId: {
        networkId: string;
        messageId: string;
        timepoint: string;
        additional: string;
    };
    /**
     * Lookup294: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup295: pallet_staking::pallet::pallet::Call<T>
     **/
    PalletStakingPalletCall: {
        _enum: {
            bond: {
                controller: string;
                value: string;
                payee: string;
            };
            bond_extra: {
                maxAdditional: string;
            };
            unbond: {
                value: string;
            };
            withdraw_unbonded: {
                numSlashingSpans: string;
            };
            validate: {
                prefs: string;
            };
            nominate: {
                targets: string;
            };
            chill: string;
            set_payee: {
                payee: string;
            };
            set_controller: {
                controller: string;
            };
            set_validator_count: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            increase_validator_count: {
                additional: string;
            };
            scale_validator_count: {
                factor: string;
            };
            force_no_eras: string;
            force_new_era: string;
            set_invulnerables: {
                invulnerables: string;
            };
            force_unstake: {
                stash: string;
                numSlashingSpans: string;
            };
            force_new_era_always: string;
            cancel_deferred_slash: {
                era: string;
                slashIndices: string;
            };
            payout_stakers: {
                validatorStash: string;
                era: string;
            };
            rebond: {
                value: string;
            };
            reap_stash: {
                stash: string;
                numSlashingSpans: string;
            };
            kick: {
                who: string;
            };
            set_staking_configs: {
                minNominatorBond: string;
                minValidatorBond: string;
                maxNominatorCount: string;
                maxValidatorCount: string;
                chillThreshold: string;
                minCommission: string;
            };
            chill_other: {
                controller: string;
            };
            force_apply_min_commission: {
                validatorStash: string;
            };
            set_min_commission: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
        };
    };
    /**
     * Lookup296: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
     **/
    PalletStakingRewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
            None: string;
        };
    };
    /**
     * Lookup297: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU128: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup298: pallet_staking::pallet::pallet::ConfigOp<T>
     **/
    PalletStakingPalletConfigOpU32: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup299: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Percent>
     **/
    PalletStakingPalletConfigOpPercent: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup300: pallet_staking::pallet::pallet::ConfigOp<sp_arithmetic::per_things::Perbill>
     **/
    PalletStakingPalletConfigOpPerbill: {
        _enum: {
            Noop: string;
            Set: string;
            Remove: string;
        };
    };
    /**
     * Lookup301: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup302: framenode_runtime::opaque::SessionKeys
     **/
    FramenodeRuntimeOpaqueSessionKeys: {
        babe: string;
        grandpa: string;
        imOnline: string;
        beefy: string;
    };
    /**
     * Lookup303: sp_beefy::crypto::Public
     **/
    SpBeefyCryptoPublic: string;
    /**
     * Lookup304: pallet_grandpa::pallet::Call<T>
     **/
    PalletGrandpaCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            note_stalled: {
                delay: string;
                bestFinalizedBlockNumber: string;
            };
        };
    };
    /**
     * Lookup305: sp_finality_grandpa::EquivocationProof<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    /**
     * Lookup306: sp_finality_grandpa::Equivocation<primitive_types::H256, N>
     **/
    SpFinalityGrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    /**
     * Lookup307: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrevote: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup308: finality_grandpa::Prevote<primitive_types::H256, N>
     **/
    FinalityGrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup309: sp_finality_grandpa::app::Signature
     **/
    SpFinalityGrandpaAppSignature: string;
    /**
     * Lookup310: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup312: finality_grandpa::Equivocation<sp_finality_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_finality_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrecommit: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup313: finality_grandpa::Precommit<primitive_types::H256, N>
     **/
    FinalityGrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup315: pallet_im_online::pallet::Call<T>
     **/
    PalletImOnlineCall: {
        _enum: {
            heartbeat: {
                heartbeat: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup316: pallet_im_online::Heartbeat<BlockNumber>
     **/
    PalletImOnlineHeartbeat: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    /**
     * Lookup317: sp_core::offchain::OpaqueNetworkState
     **/
    SpCoreOffchainOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup321: pallet_im_online::sr25519::app_sr25519::Signature
     **/
    PalletImOnlineSr25519AppSr25519Signature: string;
    /**
     * Lookup322: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup323: trading_pair::pallet::Call<T>
     **/
    TradingPairCall: {
        _enum: {
            register: {
                dexId: string;
                baseAssetId: string;
                targetAssetId: string;
            };
        };
    };
    /**
     * Lookup324: assets::pallet::Call<T>
     **/
    AssetsCall: {
        _enum: {
            register: {
                symbol: string;
                name: string;
                initialSupply: string;
                isMintable: string;
                isIndivisible: string;
                optContentSrc: string;
                optDesc: string;
            };
            transfer: {
                assetId: string;
                to: string;
                amount: string;
            };
            mint: {
                assetId: string;
                to: string;
                amount: string;
            };
            force_mint: {
                assetId: string;
                to: string;
                amount: string;
            };
            burn: {
                assetId: string;
                amount: string;
            };
            update_balance: {
                who: string;
                currencyId: string;
                amount: string;
            };
            set_non_mintable: {
                assetId: string;
            };
            update_info: {
                assetId: string;
                newSymbol: string;
                newName: string;
            };
        };
    };
    /**
     * Lookup329: multicollateral_bonding_curve_pool::pallet::Call<T>
     **/
    MulticollateralBondingCurvePoolCall: {
        _enum: {
            initialize_pool: {
                collateralAssetId: string;
            };
            set_reference_asset: {
                referenceAssetId: string;
            };
            set_optional_reward_multiplier: {
                collateralAssetId: string;
                multiplier: string;
            };
            set_price_bias: {
                priceBias: string;
            };
            set_price_change_config: {
                priceChangeRate: string;
                priceChangeStep: string;
            };
        };
    };
    /**
     * Lookup330: technical::pallet::Call<T>
     **/
    TechnicalCall: string;
    /**
     * Lookup331: pool_xyk::pallet::Call<T>
     **/
    PoolXykCall: {
        _enum: {
            deposit_liquidity: {
                dexId: string;
                inputAssetA: string;
                inputAssetB: string;
                inputADesired: string;
                inputBDesired: string;
                inputAMin: string;
                inputBMin: string;
            };
            withdraw_liquidity: {
                dexId: string;
                outputAssetA: string;
                outputAssetB: string;
                markerAssetDesired: string;
                outputAMin: string;
                outputBMin: string;
            };
            initialize_pool: {
                dexId: string;
                assetA: string;
                assetB: string;
            };
        };
    };
    /**
     * Lookup332: liquidity_proxy::pallet::Call<T>
     **/
    LiquidityProxyCall: {
        _enum: {
            swap: {
                dexId: string;
                inputAssetId: string;
                outputAssetId: string;
                swapAmount: string;
                selectedSourceTypes: string;
                filterMode: string;
            };
            swap_transfer: {
                receiver: string;
                dexId: string;
                inputAssetId: string;
                outputAssetId: string;
                swapAmount: string;
                selectedSourceTypes: string;
                filterMode: string;
            };
            swap_transfer_batch: {
                swapBatches: string;
                inputAssetId: string;
                maxInputAmount: string;
                selectedSourceTypes: string;
                filterMode: string;
            };
            enable_liquidity_source: {
                liquiditySource: string;
            };
            disable_liquidity_source: {
                liquiditySource: string;
            };
            set_adar_commission_ratio: {
                commissionRatio: string;
            };
            xorless_transfer: {
                dexId: string;
                assetId: string;
                receiver: string;
                amount: string;
                desiredXorAmount: string;
                maxAmountIn: string;
                selectedSourceTypes: string;
                filterMode: string;
                additionalData: string;
            };
        };
    };
    /**
     * Lookup333: common::swap_amount::SwapAmount<AmountType>
     **/
    CommonSwapAmount: {
        _enum: {
            WithDesiredInput: {
                desiredAmountIn: string;
                minAmountOut: string;
            };
            WithDesiredOutput: {
                desiredAmountOut: string;
                maxAmountIn: string;
            };
        };
    };
    /**
     * Lookup335: common::primitives::FilterMode
     **/
    CommonPrimitivesFilterMode: {
        _enum: string[];
    };
    /**
     * Lookup337: liquidity_proxy::SwapBatchInfo<common::primitives::AssetId32<common::primitives::PredefinedAssetId>, DEXId, sp_core::crypto::AccountId32>
     **/
    LiquidityProxySwapBatchInfo: {
        outcomeAssetId: string;
        outcomeAssetReuse: string;
        dexId: string;
        receivers: string;
    };
    /**
     * Lookup339: liquidity_proxy::BatchReceiverInfo<sp_core::crypto::AccountId32>
     **/
    LiquidityProxyBatchReceiverInfo: {
        accountId: string;
        targetAmount: string;
    };
    /**
     * Lookup340: pallet_collective::pallet::Call<T, I>
     **/
    PalletCollectiveCall: {
        _enum: {
            set_members: {
                newMembers: string;
                prime: string;
                oldCount: string;
            };
            execute: {
                proposal: string;
                lengthBound: string;
            };
            propose: {
                threshold: string;
                proposal: string;
                lengthBound: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
            close_old_weight: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
            disapprove_proposal: {
                proposalHash: string;
            };
            close: {
                proposalHash: string;
                index: string;
                proposalWeightBound: string;
                lengthBound: string;
            };
        };
    };
    /**
     * Lookup344: pallet_democracy::pallet::Call<T>
     **/
    PalletDemocracyCall: {
        _enum: {
            propose: {
                proposal: string;
                value: string;
            };
            second: {
                proposal: string;
            };
            vote: {
                refIndex: string;
                vote: string;
            };
            emergency_cancel: {
                refIndex: string;
            };
            external_propose: {
                proposal: string;
            };
            external_propose_majority: {
                proposal: string;
            };
            external_propose_default: {
                proposal: string;
            };
            fast_track: {
                proposalHash: string;
                votingPeriod: string;
                delay: string;
            };
            veto_external: {
                proposalHash: string;
            };
            cancel_referendum: {
                refIndex: string;
            };
            delegate: {
                to: string;
                conviction: string;
                balance: string;
            };
            undelegate: string;
            clear_public_proposals: string;
            unlock: {
                target: string;
            };
            remove_vote: {
                index: string;
            };
            remove_other_vote: {
                target: string;
                index: string;
            };
            blacklist: {
                proposalHash: string;
                maybeRefIndex: string;
            };
            cancel_proposal: {
                propIndex: string;
            };
        };
    };
    /**
     * Lookup345: frame_support::traits::preimages::Bounded<framenode_runtime::RuntimeCall>
     **/
    FrameSupportPreimagesBounded: {
        _enum: {
            Legacy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Inline: string;
            Lookup: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                len: string;
            };
        };
    };
    /**
     * Lookup347: pallet_democracy::conviction::Conviction
     **/
    PalletDemocracyConviction: {
        _enum: string[];
    };
    /**
     * Lookup349: dex_api::pallet::Call<T>
     **/
    DexApiCall: string;
    /**
     * Lookup350: eth_bridge::pallet::Call<T>
     **/
    EthBridgeCall: {
        _enum: {
            register_bridge: {
                bridgeContractAddress: string;
                initialPeers: string;
                signatureVersion: string;
            };
            add_asset: {
                assetId: string;
                networkId: string;
            };
            add_sidechain_token: {
                tokenAddress: string;
                symbol: string;
                name: string;
                decimals: string;
                networkId: string;
            };
            transfer_to_sidechain: {
                assetId: string;
                to: string;
                amount: string;
                networkId: string;
            };
            request_from_sidechain: {
                ethTxHash: string;
                kind: string;
                networkId: string;
            };
            finalize_incoming_request: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                networkId: string;
            };
            add_peer: {
                accountId: string;
                address: string;
                networkId: string;
            };
            remove_peer: {
                accountId: string;
                peerAddress: string;
                networkId: string;
            };
            prepare_for_migration: {
                networkId: string;
            };
            migrate: {
                newContractAddress: string;
                erc20NativeTokens: string;
                networkId: string;
                newSignatureVersion: string;
            };
            register_incoming_request: {
                incomingRequest: string;
            };
            import_incoming_request: {
                loadIncomingRequest: string;
                incomingRequestResult: string;
            };
            approve_request: {
                _alias: {
                    hash_: string;
                };
                ocwPublic: string;
                hash_: string;
                signatureParams: string;
                networkId: string;
            };
            abort_request: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                error: string;
                networkId: string;
            };
            force_add_peer: {
                who: string;
                address: string;
                networkId: string;
            };
            remove_sidechain_asset: {
                assetId: string;
                networkId: string;
            };
            register_existing_sidechain_asset: {
                assetId: string;
                tokenAddress: string;
                networkId: string;
            };
        };
    };
    /**
     * Lookup351: eth_bridge::BridgeSignatureVersion
     **/
    EthBridgeBridgeSignatureVersion: {
        _enum: string[];
    };
    /**
     * Lookup352: eth_bridge::requests::IncomingRequestKind
     **/
    EthBridgeRequestsIncomingRequestKind: {
        _enum: {
            Transaction: string;
            Meta: string;
        };
    };
    /**
     * Lookup353: eth_bridge::requests::IncomingTransactionRequestKind
     **/
    EthBridgeRequestsIncomingTransactionRequestKind: {
        _enum: string[];
    };
    /**
     * Lookup354: eth_bridge::requests::IncomingMetaRequestKind
     **/
    EthBridgeRequestsIncomingMetaRequestKind: {
        _enum: string[];
    };
    /**
     * Lookup356: eth_bridge::requests::IncomingRequest<T>
     **/
    EthBridgeRequestsIncomingRequest: {
        _enum: {
            Transfer: string;
            AddToken: string;
            ChangePeers: string;
            CancelOutgoingRequest: string;
            MarkAsDone: string;
            PrepareForMigration: string;
            Migrate: string;
            ChangePeersCompat: string;
        };
    };
    /**
     * Lookup357: eth_bridge::requests::incoming::IncomingTransfer<T>
     **/
    EthBridgeRequestsIncomingIncomingTransfer: {
        from: string;
        to: string;
        assetId: string;
        assetKind: string;
        amount: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
        shouldTakeFee: string;
    };
    /**
     * Lookup358: eth_bridge::requests::AssetKind
     **/
    EthBridgeRequestsAssetKind: {
        _enum: string[];
    };
    /**
     * Lookup359: eth_bridge::requests::incoming::IncomingAddToken<T>
     **/
    EthBridgeRequestsIncomingIncomingAddToken: {
        tokenAddress: string;
        assetId: string;
        precision: string;
        symbol: string;
        name: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup360: eth_bridge::requests::incoming::IncomingChangePeers<T>
     **/
    EthBridgeRequestsIncomingIncomingChangePeers: {
        peerAccountId: string;
        peerAddress: string;
        removed: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup361: eth_bridge::requests::incoming::IncomingCancelOutgoingRequest<T>
     **/
    EthBridgeRequestsIncomingIncomingCancelOutgoingRequest: {
        outgoingRequest: string;
        outgoingRequestHash: string;
        initialRequestHash: string;
        txInput: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup362: eth_bridge::requests::OutgoingRequest<T>
     **/
    EthBridgeRequestsOutgoingRequest: {
        _enum: {
            Transfer: string;
            AddAsset: string;
            AddToken: string;
            AddPeer: string;
            RemovePeer: string;
            PrepareForMigration: string;
            Migrate: string;
            AddPeerCompat: string;
            RemovePeerCompat: string;
        };
    };
    /**
     * Lookup363: eth_bridge::requests::outgoing::OutgoingTransfer<T>
     **/
    EthBridgeRequestsOutgoingOutgoingTransfer: {
        from: string;
        to: string;
        assetId: string;
        amount: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup364: eth_bridge::requests::outgoing::OutgoingAddAsset<T>
     **/
    EthBridgeRequestsOutgoingOutgoingAddAsset: {
        author: string;
        assetId: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup365: eth_bridge::requests::outgoing::OutgoingAddToken<T>
     **/
    EthBridgeRequestsOutgoingOutgoingAddToken: {
        author: string;
        tokenAddress: string;
        symbol: string;
        name: string;
        decimals: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup366: eth_bridge::requests::outgoing::OutgoingAddPeer<T>
     **/
    EthBridgeRequestsOutgoingOutgoingAddPeer: {
        author: string;
        peerAddress: string;
        peerAccountId: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup367: eth_bridge::requests::outgoing::OutgoingRemovePeer<T>
     **/
    EthBridgeRequestsOutgoingOutgoingRemovePeer: {
        author: string;
        peerAccountId: string;
        peerAddress: string;
        nonce: string;
        networkId: string;
        timepoint: string;
        compatHash: string;
    };
    /**
     * Lookup369: eth_bridge::requests::outgoing::OutgoingPrepareForMigration<T>
     **/
    EthBridgeRequestsOutgoingOutgoingPrepareForMigration: {
        author: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup370: eth_bridge::requests::outgoing::OutgoingMigrate<T>
     **/
    EthBridgeRequestsOutgoingOutgoingMigrate: {
        author: string;
        newContractAddress: string;
        erc20NativeTokens: string;
        nonce: string;
        networkId: string;
        timepoint: string;
        newSignatureVersion: string;
    };
    /**
     * Lookup371: eth_bridge::requests::outgoing::OutgoingAddPeerCompat<T>
     **/
    EthBridgeRequestsOutgoingOutgoingAddPeerCompat: {
        author: string;
        peerAddress: string;
        peerAccountId: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup372: eth_bridge::requests::outgoing::OutgoingRemovePeerCompat<T>
     **/
    EthBridgeRequestsOutgoingOutgoingRemovePeerCompat: {
        author: string;
        peerAccountId: string;
        peerAddress: string;
        nonce: string;
        networkId: string;
        timepoint: string;
    };
    /**
     * Lookup373: eth_bridge::requests::incoming::IncomingMarkAsDoneRequest<T>
     **/
    EthBridgeRequestsIncomingIncomingMarkAsDoneRequest: {
        outgoingRequestHash: string;
        initialRequestHash: string;
        author: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup374: eth_bridge::requests::incoming::IncomingPrepareForMigration<T>
     **/
    EthBridgeRequestsIncomingIncomingPrepareForMigration: {
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup375: eth_bridge::requests::incoming::IncomingMigrate<T>
     **/
    EthBridgeRequestsIncomingIncomingMigrate: {
        newContractAddress: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup376: eth_bridge::requests::incoming::IncomingChangePeersCompat<T>
     **/
    EthBridgeRequestsIncomingIncomingChangePeersCompat: {
        peerAccountId: string;
        peerAddress: string;
        added: string;
        contract: string;
        author: string;
        txHash: string;
        atHeight: string;
        timepoint: string;
        networkId: string;
    };
    /**
     * Lookup377: eth_bridge::requests::incoming::ChangePeersContract
     **/
    EthBridgeRequestsIncomingChangePeersContract: {
        _enum: string[];
    };
    /**
     * Lookup378: eth_bridge::requests::LoadIncomingRequest<T>
     **/
    EthBridgeRequestsLoadIncomingRequest: {
        _enum: {
            Transaction: string;
            Meta: string;
        };
    };
    /**
     * Lookup379: eth_bridge::requests::LoadIncomingTransactionRequest<T>
     **/
    EthBridgeRequestsLoadIncomingTransactionRequest: {
        _alias: {
            hash_: string;
        };
        author: string;
        hash_: string;
        timepoint: string;
        kind: string;
        networkId: string;
    };
    /**
     * Lookup380: eth_bridge::requests::LoadIncomingMetaRequest<T>
     **/
    EthBridgeRequestsLoadIncomingMetaRequest: {
        _alias: {
            hash_: string;
        };
        author: string;
        hash_: string;
        timepoint: string;
        kind: string;
        networkId: string;
    };
    /**
     * Lookup382: eth_bridge::offchain::SignatureParams
     **/
    EthBridgeOffchainSignatureParams: {
        r: string;
        s: string;
        v: string;
    };
    /**
     * Lookup383: pswap_distribution::pallet::Call<T>
     **/
    PswapDistributionCall: {
        _enum: string[];
    };
    /**
     * Lookup386: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup388: iroha_migration::pallet::Call<T>
     **/
    IrohaMigrationCall: {
        _enum: {
            migrate: {
                irohaAddress: string;
                irohaPublicKey: string;
                irohaSignature: string;
            };
        };
    };
    /**
     * Lookup389: pallet_membership::pallet::Call<T, I>
     **/
    PalletMembershipCall: {
        _enum: {
            add_member: {
                who: string;
            };
            remove_member: {
                who: string;
            };
            swap_member: {
                remove: string;
                add: string;
            };
            reset_members: {
                members: string;
            };
            change_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_prime: {
                who: string;
            };
            clear_prime: string;
        };
    };
    /**
     * Lookup390: pallet_elections_phragmen::pallet::Call<T>
     **/
    PalletElectionsPhragmenCall: {
        _enum: {
            vote: {
                votes: string;
                value: string;
            };
            remove_voter: string;
            submit_candidacy: {
                candidateCount: string;
            };
            renounce_candidacy: {
                renouncing: string;
            };
            remove_member: {
                who: string;
                slashBond: string;
                rerunElection: string;
            };
            clean_defunct_voters: {
                numVoters: string;
                numDefunct: string;
            };
        };
    };
    /**
     * Lookup391: pallet_elections_phragmen::Renouncing
     **/
    PalletElectionsPhragmenRenouncing: {
        _enum: {
            Member: string;
            RunnerUp: string;
            Candidate: string;
        };
    };
    /**
     * Lookup392: vested_rewards::pallet::Call<T>
     **/
    VestedRewardsCall: {
        _enum: {
            claim_rewards: string;
            claim_crowdloan_rewards: {
                crowdloan: string;
            };
            update_rewards: {
                rewards: string;
            };
            register_crowdloan: {
                tag: string;
                startBlock: string;
                length: string;
                rewards: string;
                contributions: string;
            };
        };
    };
    /**
     * Lookup402: pallet_identity::pallet::Call<T>
     **/
    PalletIdentityCall: {
        _enum: {
            add_registrar: {
                account: string;
            };
            set_identity: {
                info: string;
            };
            set_subs: {
                subs: string;
            };
            clear_identity: string;
            request_judgement: {
                regIndex: string;
                maxFee: string;
            };
            cancel_request: {
                regIndex: string;
            };
            set_fee: {
                index: string;
                fee: string;
            };
            set_account_id: {
                _alias: {
                    new_: string;
                };
                index: string;
                new_: string;
            };
            set_fields: {
                index: string;
                fields: string;
            };
            provide_judgement: {
                regIndex: string;
                target: string;
                judgement: string;
                identity: string;
            };
            kill_identity: {
                target: string;
            };
            add_sub: {
                sub: string;
                data: string;
            };
            rename_sub: {
                sub: string;
                data: string;
            };
            remove_sub: {
                sub: string;
            };
            quit_sub: string;
        };
    };
    /**
     * Lookup403: pallet_identity::types::IdentityInfo<FieldLimit>
     **/
    PalletIdentityIdentityInfo: {
        additional: string;
        display: string;
        legal: string;
        web: string;
        riot: string;
        email: string;
        pgpFingerprint: string;
        image: string;
        twitter: string;
    };
    /**
     * Lookup439: pallet_identity::types::BitFlags<pallet_identity::types::IdentityField>
     **/
    PalletIdentityBitFlags: {
        _bitLength: number;
        Display: number;
        Legal: number;
        Web: number;
        Riot: number;
        Email: number;
        PgpFingerprint: number;
        Image: number;
        Twitter: number;
    };
    /**
     * Lookup440: pallet_identity::types::IdentityField
     **/
    PalletIdentityIdentityField: {
        _enum: string[];
    };
    /**
     * Lookup441: pallet_identity::types::Judgement<Balance>
     **/
    PalletIdentityJudgement: {
        _enum: {
            Unknown: string;
            FeePaid: string;
            Reasonable: string;
            KnownGood: string;
            OutOfDate: string;
            LowQuality: string;
            Erroneous: string;
        };
    };
    /**
     * Lookup442: xst::pallet::Call<T>
     **/
    XstCall: {
        _enum: {
            set_reference_asset: {
                referenceAssetId: string;
            };
            enable_synthetic_asset: {
                assetId: string;
                referenceSymbol: string;
                feeRatio: string;
            };
            register_synthetic_asset: {
                assetSymbol: string;
                assetName: string;
                referenceSymbol: string;
                feeRatio: string;
            };
            disable_synthetic_asset: {
                syntheticAsset: string;
            };
            remove_synthetic_asset: {
                syntheticAsset: string;
            };
            set_synthetic_asset_fee: {
                syntheticAsset: string;
                feeRatio: string;
            };
            set_synthetic_base_asset_floor_price: {
                floorPrice: string;
            };
        };
    };
    /**
     * Lookup443: ceres_staking::pallet::Call<T>
     **/
    CeresStakingCall: {
        _enum: {
            deposit: {
                amount: string;
            };
            withdraw: string;
            change_rewards_remaining: {
                rewardsRemaining: string;
            };
        };
    };
    /**
     * Lookup444: ceres_liquidity_locker::pallet::Call<T>
     **/
    CeresLiquidityLockerCall: {
        _enum: {
            lock_liquidity: {
                assetA: string;
                assetB: string;
                unlockingTimestamp: string;
                percentageOfPoolTokens: string;
                option: string;
            };
            change_ceres_fee: {
                ceresFee: string;
            };
        };
    };
    /**
     * Lookup445: ceres_token_locker::pallet::Call<T>
     **/
    CeresTokenLockerCall: {
        _enum: {
            lock_tokens: {
                assetId: string;
                unlockingTimestamp: string;
                numberOfTokens: string;
            };
            withdraw_tokens: {
                assetId: string;
                unlockingTimestamp: string;
                numberOfTokens: string;
            };
            change_fee: {
                newFee: string;
            };
        };
    };
    /**
     * Lookup446: ceres_governance_platform::pallet::Call<T>
     **/
    CeresGovernancePlatformCall: {
        _enum: {
            vote: {
                pollId: string;
                votingOption: string;
                numberOfVotes: string;
            };
            create_poll: {
                pollId: string;
                numberOfOptions: string;
                pollStartTimestamp: string;
                pollEndTimestamp: string;
            };
            withdraw: {
                pollId: string;
            };
        };
    };
    /**
     * Lookup447: ceres_launchpad::pallet::Call<T>
     **/
    CeresLaunchpadCall: {
        _enum: {
            create_ilo: {
                baseAsset: string;
                assetId: string;
                tokensForIlo: string;
                tokensForLiquidity: string;
                iloPrice: string;
                softCap: string;
                hardCap: string;
                minContribution: string;
                maxContribution: string;
                refundType: string;
                liquidityPercent: string;
                listingPrice: string;
                lockupDays: string;
                startTimestamp: string;
                endTimestamp: string;
                teamVestingTotalTokens: string;
                teamVestingFirstReleasePercent: string;
                teamVestingPeriod: string;
                teamVestingPercent: string;
                firstReleasePercent: string;
                vestingPeriod: string;
                vestingPercent: string;
            };
            contribute: {
                assetId: string;
                fundsToContribute: string;
            };
            emergency_withdraw: {
                assetId: string;
            };
            finish_ilo: {
                assetId: string;
            };
            claim_lp_tokens: {
                assetId: string;
            };
            claim: {
                assetId: string;
            };
            change_fee_percent_for_raised_funds: {
                feePercent: string;
            };
            change_ceres_burn_fee: {
                ceresFee: string;
            };
            change_ceres_contribution_fee: {
                ceresFee: string;
            };
            claim_pswap_rewards: string;
            add_whitelisted_contributor: {
                contributor: string;
            };
            remove_whitelisted_contributor: {
                contributor: string;
            };
            add_whitelisted_ilo_organizer: {
                iloOrganizer: string;
            };
            remove_whitelisted_ilo_organizer: {
                iloOrganizer: string;
            };
        };
    };
    /**
     * Lookup448: demeter_farming_platform::pallet::Call<T>
     **/
    DemeterFarmingPlatformCall: {
        _enum: {
            register_token: {
                poolAsset: string;
                tokenPerBlock: string;
                farmsAllocation: string;
                stakingAllocation: string;
                teamAllocation: string;
                teamAccount: string;
            };
            add_pool: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                multiplier: string;
                depositFee: string;
                isCore: string;
            };
            deposit: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                pooledTokens: string;
            };
            get_rewards: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
            };
            withdraw: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                pooledTokens: string;
                isFarm: string;
            };
            remove_pool: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
            };
            change_pool_multiplier: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                newMultiplier: string;
            };
            change_total_tokens: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                totalTokens: string;
            };
            change_info: {
                changedUser: string;
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                poolTokens: string;
            };
            change_pool_deposit_fee: {
                baseAsset: string;
                poolAsset: string;
                rewardAsset: string;
                isFarm: string;
                depositFee: string;
            };
            change_token_info: {
                poolAsset: string;
                tokenPerBlock: string;
                farmsAllocation: string;
                stakingAllocation: string;
                teamAllocation: string;
                teamAccount: string;
            };
        };
    };
    /**
     * Lookup449: pallet_bags_list::pallet::Call<T, I>
     **/
    PalletBagsListCall: {
        _enum: {
            rebag: {
                dislocated: string;
            };
            put_in_front_of: {
                lighter: string;
            };
        };
    };
    /**
     * Lookup450: pallet_election_provider_multi_phase::pallet::Call<T>
     **/
    PalletElectionProviderMultiPhaseCall: {
        _enum: {
            submit_unsigned: {
                rawSolution: string;
                witness: string;
            };
            set_minimum_untrusted_score: {
                maybeNextScore: string;
            };
            set_emergency_election_result: {
                supports: string;
            };
            submit: {
                rawSolution: string;
            };
            governance_fallback: {
                maybeMaxVoters: string;
                maybeMaxTargets: string;
            };
        };
    };
    /**
     * Lookup451: pallet_election_provider_multi_phase::RawSolution<framenode_runtime::NposCompactSolution24>
     **/
    PalletElectionProviderMultiPhaseRawSolution: {
        solution: string;
        score: string;
        round: string;
    };
    /**
     * Lookup452: framenode_runtime::NposCompactSolution24
     **/
    FramenodeRuntimeNposCompactSolution24: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
        votes17: string;
        votes18: string;
        votes19: string;
        votes20: string;
        votes21: string;
        votes22: string;
        votes23: string;
        votes24: string;
    };
    /**
     * Lookup527: pallet_election_provider_multi_phase::SolutionOrSnapshotSize
     **/
    PalletElectionProviderMultiPhaseSolutionOrSnapshotSize: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup531: sp_npos_elections::Support<sp_core::crypto::AccountId32>
     **/
    SpNposElectionsSupport: {
        total: string;
        voters: string;
    };
    /**
     * Lookup532: band::pallet::Call<T, I>
     **/
    BandCall: {
        _enum: {
            relay: {
                rates: string;
                resolveTime: string;
                requestId: string;
            };
            force_relay: {
                rates: string;
                resolveTime: string;
                requestId: string;
            };
            add_relayers: {
                accountIds: string;
            };
            remove_relayers: {
                accountIds: string;
            };
            set_dynamic_fee_parameters: {
                feeParameters: string;
            };
        };
    };
    /**
     * Lookup536: band::FeeCalculationParameters
     **/
    BandFeeCalculationParameters: {
        decay: string;
        minFee: string;
        deviation: string;
    };
    /**
     * Lookup537: oracle_proxy::pallet::Call<T>
     **/
    OracleProxyCall: {
        _enum: {
            enable_oracle: {
                oracle: string;
            };
            disable_oracle: {
                oracle: string;
            };
        };
    };
    /**
     * Lookup538: hermes_governance_platform::pallet::Call<T>
     **/
    HermesGovernancePlatformCall: {
        _enum: {
            vote: {
                pollId: string;
                votingOption: string;
            };
            create_poll: {
                pollStartTimestamp: string;
                pollEndTimestamp: string;
                title: string;
                description: string;
                options: string;
            };
            withdraw_funds_voter: {
                pollId: string;
            };
            withdraw_funds_creator: {
                pollId: string;
            };
            change_min_hermes_for_voting: {
                hermesAmount: string;
            };
            change_min_hermes_for_creating_poll: {
                hermesAmount: string;
            };
        };
    };
    /**
     * Lookup543: pallet_preimage::pallet::Call<T>
     **/
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup544: order_book::pallet::Call<T>
     **/
    OrderBookCall: {
        _enum: {
            create_orderbook: {
                orderBookId: string;
            };
            delete_orderbook: {
                orderBookId: string;
            };
            update_orderbook: {
                orderBookId: string;
                tickSize: string;
                stepLotSize: string;
                minLotSize: string;
                maxLotSize: string;
            };
            change_orderbook_status: {
                orderBookId: string;
                status: string;
            };
            place_limit_order: {
                orderBookId: string;
                price: string;
                amount: string;
                side: string;
                lifespan: string;
            };
            cancel_limit_order: {
                orderBookId: string;
                orderId: string;
            };
            cancel_limit_orders_batch: {
                limitOrdersToCancel: string;
            };
            execute_market_order: {
                orderBookId: string;
                direction: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup547: bridge_proxy::pallet::Call<T>
     **/
    BridgeProxyCall: {
        _enum: {
            burn: {
                networkId: string;
                assetId: string;
                recipient: string;
                amount: string;
            };
            add_limited_asset: {
                assetId: string;
            };
            remove_limited_asset: {
                assetId: string;
            };
            update_transfer_limit: {
                settings: string;
            };
        };
    };
    /**
     * Lookup548: bridge_types::GenericAccount<sp_core::crypto::AccountId32>
     **/
    BridgeTypesGenericAccount: {
        _enum: {
            EVM: string;
            Sora: string;
            Parachain: string;
            Unknown: string;
            Root: string;
        };
    };
    /**
     * Lookup549: bridge_proxy::TransferLimitSettings<BlockNumber>
     **/
    BridgeProxyTransferLimitSettings: {
        maxAmount: string;
        periodBlocks: string;
    };
    /**
     * Lookup550: ethereum_light_client::pallet::Call<T>
     **/
    EthereumLightClientCall: {
        _enum: {
            register_network: {
                networkConfig: string;
                header: string;
                initialDifficulty: string;
            };
            update_difficulty_config: {
                networkConfig: string;
            };
            import_header: {
                networkId: string;
                header: string;
                proof: string;
                mixNonce: string;
                submitter: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup551: bridge_types::network_config::NetworkConfig
     **/
    BridgeTypesNetworkConfig: {
        _enum: {
            Mainnet: string;
            Ropsten: string;
            Sepolia: string;
            Rinkeby: string;
            Goerli: string;
            Classic: string;
            Mordor: string;
            Custom: {
                chainId: string;
                consensus: string;
            };
        };
    };
    /**
     * Lookup552: bridge_types::network_config::Consensus
     **/
    BridgeTypesNetworkConfigConsensus: {
        _enum: {
            Ethash: {
                forkConfig: string;
            };
            Etchash: {
                forkConfig: string;
            };
            Clique: {
                period: string;
                epoch: string;
            };
        };
    };
    /**
     * Lookup553: bridge_types::difficulty::ForkConfig
     **/
    BridgeTypesDifficultyForkConfig: {
        byzantiumForkBlock: string;
        constantinopleForkBlock: string;
        muirGlacierForkBlock: string;
        londonForkBlock: string;
        arrowGlacierForkBlock: string;
        grayGlacierForkBlock: string;
    };
    /**
     * Lookup554: bridge_types::difficulty::ClassicForkConfig
     **/
    BridgeTypesDifficultyClassicForkConfig: {
        ecip1041Block: string;
        ecip1099Block: string;
    };
    /**
     * Lookup555: bridge_types::header::Header
     **/
    BridgeTypesHeader: {
        parentHash: string;
        timestamp: string;
        number: string;
        author: string;
        transactionsRoot: string;
        ommersHash: string;
        extraData: string;
        stateRoot: string;
        receiptsRoot: string;
        logsBloom: string;
        gasUsed: string;
        gasLimit: string;
        difficulty: string;
        seal: string;
        baseFee: string;
    };
    /**
     * Lookup556: ethbloom::Bloom
     **/
    EthbloomBloom: string;
    /**
     * Lookup560: bridge_types::ethashproof::DoubleNodeWithMerkleProof
     **/
    BridgeTypesEthashproofDoubleNodeWithMerkleProof: {
        dagNodes: string;
        proof: string;
    };
    /**
     * Lookup564: bridge_types::ethashproof::MixNonce
     **/
    BridgeTypesEthashproofMixNonce: string;
    /**
     * Lookup565: sp_runtime::MultiSignature
     **/
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /**
     * Lookup566: bridge_inbound_channel::pallet::Call<T>
     **/
    BridgeInboundChannelCall: {
        _enum: {
            submit: {
                networkId: string;
                log: string;
                proof: string;
            };
            batch_dispatched: {
                networkId: string;
                log: string;
                proof: string;
            };
            register_channel: {
                networkId: string;
                inboundChannel: string;
                outboundChannel: string;
            };
            set_reward_fraction: {
                fraction: string;
            };
        };
    };
    /**
     * Lookup567: bridge_types::log::Log
     **/
    BridgeTypesLog: {
        address: string;
        topics: string;
        data: string;
    };
    /**
     * Lookup568: bridge_types::evm::Proof
     **/
    BridgeTypesEvmProof: {
        blockHash: string;
        txIndex: string;
        data: string;
    };
    /**
     * Lookup569: eth_app::pallet::Call<T>
     **/
    EthAppCall: {
        _enum: {
            burn: {
                networkId: string;
                recipient: string;
                amount: string;
            };
            mint: {
                sender: string;
                recipient: string;
                amount: string;
            };
            register_network: {
                networkId: string;
                name: string;
                symbol: string;
                sidechainPrecision: string;
                contract: string;
            };
            register_network_with_existing_asset: {
                networkId: string;
                assetId: string;
                contract: string;
                sidechainPrecision: string;
            };
        };
    };
    /**
     * Lookup570: erc20_app::pallet::Call<T>
     **/
    Erc20AppCall: {
        _enum: {
            mint: {
                token: string;
                sender: string;
                recipient: string;
                amount: string;
            };
            register_asset_internal: {
                assetId: string;
                contract: string;
            };
            burn: {
                networkId: string;
                assetId: string;
                recipient: string;
                amount: string;
            };
            register_erc20_asset: {
                networkId: string;
                address: string;
                symbol: string;
                name: string;
                decimals: string;
            };
            register_existing_erc20_asset: {
                networkId: string;
                address: string;
                assetId: string;
                decimals: string;
            };
            register_native_asset: {
                networkId: string;
                assetId: string;
            };
            register_native_app: {
                networkId: string;
                contract: string;
            };
            register_erc20_app: {
                networkId: string;
                contract: string;
            };
        };
    };
    /**
     * Lookup571: migration_app::pallet::Call<T>
     **/
    MigrationAppCall: {
        _enum: {
            migrate_erc20: {
                networkId: string;
                erc20Assets: string;
            };
            migrate_sidechain: {
                networkId: string;
                sidechainAssets: string;
            };
            migrate_eth: {
                networkId: string;
            };
            register_network: {
                networkId: string;
                contract: string;
            };
        };
    };
    /**
     * Lookup574: beefy_light_client::pallet::Call<T>
     **/
    BeefyLightClientCall: {
        _enum: {
            initialize: {
                networkId: string;
                latestBeefyBlock: string;
                validatorSet: string;
                nextValidatorSet: string;
            };
            submit_signature_commitment: {
                networkId: string;
                commitment: string;
                validatorProof: string;
                latestMmrLeaf: string;
                proof: string;
            };
        };
    };
    /**
     * Lookup575: sp_beefy::mmr::BeefyAuthoritySet<primitive_types::H256>
     **/
    SpBeefyMmrBeefyAuthoritySet: {
        id: string;
        len: string;
        root: string;
    };
    /**
     * Lookup576: sp_beefy::commitment::Commitment<TBlockNumber>
     **/
    SpBeefyCommitment: {
        payload: string;
        blockNumber: string;
        validatorSetId: string;
    };
    /**
     * Lookup577: sp_beefy::payload::Payload
     **/
    SpBeefyPayload: string;
    /**
     * Lookup580: bridge_common::beefy_types::ValidatorProof
     **/
    BridgeCommonBeefyTypesValidatorProof: {
        validatorClaimsBitfield: string;
        signatures: string;
        positions: string;
        publicKeys: string;
        publicKeyMerkleProofs: string;
    };
    /**
     * Lookup583: bitvec::order::Msb0
     **/
    BitvecOrderMsb0: string;
    /**
     * Lookup585: sp_beefy::mmr::MmrLeaf<BlockNumber, primitive_types::H256, primitive_types::H256, bridge_types::types::LeafExtraData<primitive_types::H256, primitive_types::H256>>
     **/
    SpBeefyMmrMmrLeaf: {
        version: string;
        parentNumberAndHash: string;
        beefyNextAuthoritySet: string;
        leafExtra: string;
    };
    /**
     * Lookup586: bridge_types::types::LeafExtraData<primitive_types::H256, primitive_types::H256>
     **/
    BridgeTypesLeafExtraData: {
        randomSeed: string;
        digestHash: string;
    };
    /**
     * Lookup589: bridge_common::simplified_proof::Proof<primitive_types::H256>
     **/
    BridgeCommonSimplifiedProofProof: {
        order: string;
        items: string;
    };
    /**
     * Lookup590: substrate_bridge_channel::inbound::pallet::Call<T>
     **/
    SubstrateBridgeChannelInboundPalletCall: {
        _enum: {
            submit: {
                networkId: string;
                commitment: string;
                proof: string;
            };
        };
    };
    /**
     * Lookup591: bridge_types::GenericCommitment<MaxMessages, MaxPayload>
     **/
    BridgeTypesGenericCommitment: {
        _enum: {
            Sub: string;
            EVM: string;
        };
    };
    /**
     * Lookup592: bridge_types::substrate::Commitment<MaxMessages, MaxPayload>
     **/
    BridgeTypesSubstrateCommitment: {
        messages: string;
        nonce: string;
    };
    /**
     * Lookup594: bridge_types::substrate::BridgeMessage<MaxPayload>
     **/
    BridgeTypesSubstrateBridgeMessage: {
        payload: string;
        timepoint: string;
    };
    /**
     * Lookup597: bridge_types::evm::Commitment<MaxMessages, MaxPayload>
     **/
    BridgeTypesEvmCommitment: {
        nonce: string;
        totalMaxGas: string;
        messages: string;
    };
    /**
     * Lookup599: bridge_types::evm::Message<MaxPayload>
     **/
    BridgeTypesEvmMessage: {
        target: string;
        maxGas: string;
        payload: string;
    };
    /**
     * Lookup601: framenode_runtime::MultiProof
     **/
    FramenodeRuntimeMultiProof: {
        _enum: {
            Beefy: string;
            Multisig: string;
        };
    };
    /**
     * Lookup602: beefy_light_client::SubstrateBridgeMessageProof
     **/
    BeefyLightClientSubstrateBridgeMessageProof: {
        proof: string;
        leaf: string;
        digest: string;
    };
    /**
     * Lookup603: bridge_types::types::AuxiliaryDigest
     **/
    BridgeTypesAuxiliaryDigest: {
        logs: string;
    };
    /**
     * Lookup605: bridge_types::types::AuxiliaryDigestItem
     **/
    BridgeTypesAuxiliaryDigestItem: {
        _enum: {
            Commitment: string;
        };
    };
    /**
     * Lookup606: multisig_verifier::Proof
     **/
    MultisigVerifierProof: {
        digest: string;
        proof: string;
    };
    /**
     * Lookup607: parachain_bridge_app::pallet::Call<T>
     **/
    ParachainBridgeAppCall: {
        _enum: {
            mint: {
                assetId: string;
                sender: string;
                recipient: string;
                amount: string;
            };
            finalize_asset_registration: {
                assetId: string;
                assetKind: string;
            };
            burn: {
                networkId: string;
                assetId: string;
                recipient: string;
                amount: string;
            };
            register_thischain_asset: {
                networkId: string;
                assetId: string;
                sidechainAsset: string;
                allowedParachains: string;
                minimalXcmAmount: string;
            };
            register_sidechain_asset: {
                networkId: string;
                sidechainAsset: string;
                symbol: string;
                name: string;
                decimals: string;
                allowedParachains: string;
                minimalXcmAmount: string;
            };
            add_assetid_paraid: {
                networkId: string;
                paraId: string;
                assetId: string;
            };
            remove_assetid_paraid: {
                networkId: string;
                paraId: string;
                assetId: string;
            };
            update_transaction_status: {
                messageId: string;
                transferStatus: string;
            };
            set_minimum_xcm_incoming_asset_count: {
                networkId: string;
                assetId: string;
                minimalXcmAmount: string;
            };
        };
    };
    /**
     * Lookup608: bridge_types::types::AssetKind
     **/
    BridgeTypesAssetKind: {
        _enum: string[];
    };
    /**
     * Lookup609: xcm::v3::multiasset::AssetId
     **/
    XcmV3MultiassetAssetId: {
        _enum: {
            Concrete: string;
            Abstract: string;
        };
    };
    /**
     * Lookup610: bridge_types::substrate::XCMAppTransferStatus
     **/
    BridgeTypesSubstrateXcmAppTransferStatus: {
        _enum: string[];
    };
    /**
     * Lookup611: bridge_data_signer::pallet::Call<T>
     **/
    BridgeDataSignerCall: {
        _enum: {
            register_network: {
                networkId: string;
                peers: string;
            };
            approve: {
                networkId: string;
                data: string;
                signature: string;
            };
            add_peer: {
                networkId: string;
                peer: string;
            };
            remove_peer: {
                networkId: string;
                peer: string;
            };
            finish_remove_peer: {
                peer: string;
            };
            finish_add_peer: {
                peer: string;
            };
        };
    };
    /**
     * Lookup612: multisig_verifier::pallet::Call<T>
     **/
    MultisigVerifierCall: {
        _enum: {
            initialize: {
                networkId: string;
                peers: string;
            };
            add_peer: {
                peer: string;
            };
            remove_peer: {
                peer: string;
            };
        };
    };
    /**
     * Lookup613: pallet_sudo::pallet::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup614: faucet::pallet::Call<T>
     **/
    FaucetCall: {
        _enum: {
            transfer: {
                assetId: string;
                target: string;
                amount: string;
            };
            reset_rewards: string;
            update_limit: {
                newLimit: string;
            };
        };
    };
    /**
     * Lookup615: qa_tools::pallet::Call<T>
     **/
    QaToolsCall: {
        _enum: {
            add_to_whitelist: {
                account: string;
            };
            remove_from_whitelist: {
                account: string;
            };
            order_book_create_empty_batch: {
                orderBookIds: string;
            };
            order_book_create_and_fill_batch: {
                bidsOwner: string;
                asksOwner: string;
                fillSettings: string;
            };
        };
    };
    /**
     * Lookup619: qa_tools::pallets::order_book_tools::OrderBookFillSettings<Moment>
     **/
    QaToolsPalletsOrderBookToolsOrderBookFillSettings: {
        bestBidPrice: string;
        bestAskPrice: string;
        lifespan: string;
    };
    /**
     * Lookup621: pallet_multisig::pallet::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup622: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup623: pallet_staking::sora::DurationWrapper
     **/
    PalletStakingSoraDurationWrapper: {
        secs: string;
        nanos: string;
    };
    /**
     * Lookup624: pallet_staking::StakingLedger<T>
     **/
    PalletStakingStakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    /**
     * Lookup626: pallet_staking::UnlockChunk<Balance>
     **/
    PalletStakingUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup629: pallet_staking::Nominations<T>
     **/
    PalletStakingNominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    /**
     * Lookup631: pallet_staking::ActiveEraInfo
     **/
    PalletStakingActiveEraInfo: {
        index: string;
        start: string;
    };
    /**
     * Lookup633: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
     **/
    PalletStakingEraRewardPoints: {
        total: string;
        individual: string;
    };
    /**
     * Lookup638: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingUnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    /**
     * Lookup640: pallet_staking::slashing::SlashingSpans
     **/
    PalletStakingSlashingSlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    /**
     * Lookup641: pallet_staking::slashing::SpanRecord<Balance>
     **/
    PalletStakingSlashingSpanRecord: {
        slashed: string;
        paidOut: string;
    };
    /**
     * Lookup644: pallet_staking::pallet::pallet::Error<T>
     **/
    PalletStakingPalletError: {
        _enum: string[];
    };
    /**
     * Lookup645: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
     **/
    SpStakingOffenceOffenceDetails: {
        offender: string;
        reporters: string;
    };
    /**
     * Lookup650: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup651: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup652: pallet_grandpa::StoredState<N>
     **/
    PalletGrandpaStoredState: {
        _enum: {
            Live: string;
            PendingPause: {
                scheduledAt: string;
                delay: string;
            };
            Paused: string;
            PendingResume: {
                scheduledAt: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup653: pallet_grandpa::StoredPendingChange<N, Limit>
     **/
    PalletGrandpaStoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
        forced: string;
    };
    /**
     * Lookup655: pallet_grandpa::pallet::Error<T>
     **/
    PalletGrandpaError: {
        _enum: string[];
    };
    /**
     * Lookup659: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
     **/
    PalletImOnlineBoundedOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup663: pallet_im_online::pallet::Error<T>
     **/
    PalletImOnlineError: {
        _enum: string[];
    };
    /**
     * Lookup666: orml_tokens::BalanceLock<Balance>
     **/
    OrmlTokensBalanceLock: {
        id: string;
        amount: string;
    };
    /**
     * Lookup668: orml_tokens::AccountData<Balance>
     **/
    OrmlTokensAccountData: {
        free: string;
        reserved: string;
        frozen: string;
    };
    /**
     * Lookup670: orml_tokens::ReserveData<ReserveIdentifier, Balance>
     **/
    OrmlTokensReserveData: {
        id: string;
        amount: string;
    };
    /**
     * Lookup672: orml_tokens::module::Error<T>
     **/
    OrmlTokensModuleError: {
        _enum: string[];
    };
    /**
     * Lookup673: orml_currencies::module::Error<T>
     **/
    OrmlCurrenciesModuleError: {
        _enum: string[];
    };
    /**
     * Lookup676: trading_pair::pallet::Error<T>
     **/
    TradingPairError: {
        _enum: string[];
    };
    /**
     * Lookup678: assets::AssetRecord<T>
     **/
    AssetsAssetRecord: {
        _enum: {
            Arity0: string;
            Arity1: string;
            Arity2: string;
            Arity3: string;
            Arity4: string;
            Arity5: string;
            Arity6: string;
            Arity7: string;
            Arity8: string;
            Arity9: string;
        };
    };
    /**
     * Lookup679: assets::AssetRecordArg<T>
     **/
    AssetsAssetRecordArg: {
        _enum: {
            GenericI32: string;
            GenericU64: string;
            GenericU128: string;
            GenericU8x32: string;
            GenericH256: string;
            GenericH512: string;
            LeafAssetId: string;
            AssetRecordAssetId: string;
            Extra: string;
        };
    };
    /**
     * Lookup681: common::primitives::AssetIdExtraAssetRecordArg<DEXId, common::primitives::LiquiditySourceType, AccountId>
     **/
    CommonPrimitivesAssetIdExtraAssetRecordArg: {
        _enum: {
            DEXId: string;
            LstId: string;
            AccountId: string;
        };
    };
    /**
     * Lookup682: assets::pallet::Error<T>
     **/
    AssetsError: {
        _enum: string[];
    };
    /**
     * Lookup683: common::primitives::DEXInfo<common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    CommonPrimitivesDexInfo: {
        baseAssetId: string;
        syntheticBaseAssetId: string;
        isPublic: string;
    };
    /**
     * Lookup684: dex_manager::pallet::Error<T>
     **/
    DexManagerError: {
        _enum: string[];
    };
    /**
     * Lookup685: multicollateral_bonding_curve_pool::DistributionAccounts<multicollateral_bonding_curve_pool::DistributionAccountData<multicollateral_bonding_curve_pool::DistributionAccount<sp_core::crypto::AccountId32, common::primitives::TechAccountId<sp_core::crypto::AccountId32, common::primitives::TechAssetId<common::primitives::PredefinedAssetId>, DEXId>>>>
     **/
    MulticollateralBondingCurvePoolDistributionAccounts: {
        xorAllocation: string;
        valHolders: string;
        soraCitizens: string;
        storesAndShops: string;
        projects: string;
    };
    /**
     * Lookup686: multicollateral_bonding_curve_pool::DistributionAccountData<multicollateral_bonding_curve_pool::DistributionAccount<sp_core::crypto::AccountId32, common::primitives::TechAccountId<sp_core::crypto::AccountId32, common::primitives::TechAssetId<common::primitives::PredefinedAssetId>, DEXId>>>
     **/
    MulticollateralBondingCurvePoolDistributionAccountData: {
        account: string;
        coefficient: string;
    };
    /**
     * Lookup687: multicollateral_bonding_curve_pool::DistributionAccount<sp_core::crypto::AccountId32, common::primitives::TechAccountId<sp_core::crypto::AccountId32, common::primitives::TechAssetId<common::primitives::PredefinedAssetId>, DEXId>>
     **/
    MulticollateralBondingCurvePoolDistributionAccount: {
        _enum: {
            Account: string;
            TechAccount: string;
        };
    };
    /**
     * Lookup690: multicollateral_bonding_curve_pool::pallet::Error<T>
     **/
    MulticollateralBondingCurvePoolError: {
        _enum: string[];
    };
    /**
     * Lookup691: technical::pallet::Error<T>
     **/
    TechnicalError: {
        _enum: string[];
    };
    /**
     * Lookup694: pool_xyk::pallet::Error<T>
     **/
    PoolXykError: {
        _enum: string[];
    };
    /**
     * Lookup695: liquidity_proxy::pallet::Error<T>
     **/
    LiquidityProxyError: {
        _enum: string[];
    };
    /**
     * Lookup697: pallet_collective::Votes<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletCollectiveVotes: {
        index: string;
        threshold: string;
        ayes: string;
        nays: string;
        end: string;
    };
    /**
     * Lookup698: pallet_collective::pallet::Error<T, I>
     **/
    PalletCollectiveError: {
        _enum: string[];
    };
    /**
     * Lookup706: pallet_democracy::types::ReferendumInfo<BlockNumber, frame_support::traits::preimages::Bounded<framenode_runtime::RuntimeCall>, Balance>
     **/
    PalletDemocracyReferendumInfo: {
        _enum: {
            Ongoing: string;
            Finished: {
                approved: string;
                end: string;
            };
        };
    };
    /**
     * Lookup707: pallet_democracy::types::ReferendumStatus<BlockNumber, frame_support::traits::preimages::Bounded<framenode_runtime::RuntimeCall>, Balance>
     **/
    PalletDemocracyReferendumStatus: {
        end: string;
        proposal: string;
        threshold: string;
        delay: string;
        tally: string;
    };
    /**
     * Lookup708: pallet_democracy::types::Tally<Balance>
     **/
    PalletDemocracyTally: {
        ayes: string;
        nays: string;
        turnout: string;
    };
    /**
     * Lookup709: pallet_democracy::vote::Voting<Balance, sp_core::crypto::AccountId32, BlockNumber, MaxVotes>
     **/
    PalletDemocracyVoteVoting: {
        _enum: {
            Direct: {
                votes: string;
                delegations: string;
                prior: string;
            };
            Delegating: {
                balance: string;
                target: string;
                conviction: string;
                delegations: string;
                prior: string;
            };
        };
    };
    /**
     * Lookup713: pallet_democracy::types::Delegations<Balance>
     **/
    PalletDemocracyDelegations: {
        votes: string;
        capital: string;
    };
    /**
     * Lookup714: pallet_democracy::vote::PriorLock<BlockNumber, Balance>
     **/
    PalletDemocracyVotePriorLock: string;
    /**
     * Lookup718: pallet_democracy::pallet::Error<T>
     **/
    PalletDemocracyError: {
        _enum: string[];
    };
    /**
     * Lookup719: eth_bridge::requests::OffchainRequest<T>
     **/
    EthBridgeRequestsOffchainRequest: {
        _enum: {
            Outgoing: string;
            LoadIncoming: string;
            Incoming: string;
        };
    };
    /**
     * Lookup720: eth_bridge::requests::RequestStatus
     **/
    EthBridgeRequestsRequestStatus: {
        _enum: {
            Pending: string;
            Frozen: string;
            ApprovalsReady: string;
            Failed: string;
            Done: string;
            Broken: string;
        };
    };
    /**
     * Lookup727: eth_bridge::requests::outgoing::EthPeersSync
     **/
    EthBridgeRequestsOutgoingEthPeersSync: {
        isBridgeReady: string;
        isXorReady: string;
        isValReady: string;
    };
    /**
     * Lookup728: eth_bridge::BridgeStatus
     **/
    EthBridgeBridgeStatus: {
        _enum: string[];
    };
    /**
     * Lookup729: eth_bridge::pallet::Error<T>
     **/
    EthBridgeError: {
        _enum: string[];
    };
    /**
     * Lookup732: pswap_distribution::pallet::Error<T>
     **/
    PswapDistributionError: {
        _enum: string[];
    };
    /**
     * Lookup738: pallet_scheduler::Scheduled<Name, frame_support::traits::preimages::Bounded<framenode_runtime::RuntimeCall>, BlockNumber, framenode_runtime::OriginCaller, sp_core::crypto::AccountId32>
     **/
    PalletSchedulerScheduled: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup740: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup743: iroha_migration::PendingMultisigAccount<T>
     **/
    IrohaMigrationPendingMultisigAccount: {
        approvingAccounts: string;
        migrateAt: string;
    };
    /**
     * Lookup744: iroha_migration::pallet::Error<T>
     **/
    IrohaMigrationError: {
        _enum: string[];
    };
    /**
     * Lookup746: pallet_membership::pallet::Error<T, I>
     **/
    PalletMembershipError: {
        _enum: string[];
    };
    /**
     * Lookup748: pallet_elections_phragmen::SeatHolder<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenSeatHolder: {
        who: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup749: pallet_elections_phragmen::Voter<sp_core::crypto::AccountId32, Balance>
     **/
    PalletElectionsPhragmenVoter: {
        votes: string;
        stake: string;
        deposit: string;
    };
    /**
     * Lookup750: pallet_elections_phragmen::pallet::Error<T>
     **/
    PalletElectionsPhragmenError: {
        _enum: string[];
    };
    /**
     * Lookup751: vested_rewards::RewardInfo
     **/
    VestedRewardsRewardInfo: {
        limit: string;
        totalAvailable: string;
        rewards: string;
    };
    /**
     * Lookup752: vested_rewards::CrowdloanInfo<common::primitives::AssetId32<common::primitives::PredefinedAssetId>, BlockNumber, sp_core::crypto::AccountId32>
     **/
    VestedRewardsCrowdloanInfo: {
        totalContribution: string;
        rewards: string;
        startBlock: string;
        length: string;
        account: string;
    };
    /**
     * Lookup754: vested_rewards::CrowdloanUserInfo<common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    VestedRewardsCrowdloanUserInfo: {
        contribution: string;
        rewarded: string;
    };
    /**
     * Lookup755: vested_rewards::pallet::Error<T>
     **/
    VestedRewardsError: {
        _enum: string[];
    };
    /**
     * Lookup756: pallet_identity::types::Registration<Balance, MaxJudgements, MaxAdditionalFields>
     **/
    PalletIdentityRegistration: {
        judgements: string;
        deposit: string;
        info: string;
    };
    /**
     * Lookup764: pallet_identity::types::RegistrarInfo<Balance, sp_core::crypto::AccountId32>
     **/
    PalletIdentityRegistrarInfo: {
        account: string;
        fee: string;
        fields: string;
    };
    /**
     * Lookup766: pallet_identity::pallet::Error<T>
     **/
    PalletIdentityError: {
        _enum: string[];
    };
    /**
     * Lookup768: farming::PoolFarmer<T>
     **/
    FarmingPoolFarmer: {
        account: string;
        block: string;
        weight: string;
    };
    /**
     * Lookup769: farming::pallet::Error<T>
     **/
    FarmingError: {
        _enum: string[];
    };
    /**
     * Lookup770: xst::SyntheticInfo<common::primitives::SymbolName>
     **/
    XstSyntheticInfo: {
        referenceSymbol: string;
        feeRatio: string;
    };
    /**
     * Lookup771: xst::pallet::Error<T>
     **/
    XstError: {
        _enum: string[];
    };
    /**
     * Lookup772: price_tools::AggregatedPriceInfo
     **/
    PriceToolsAggregatedPriceInfo: {
        buy: string;
        sell: string;
    };
    /**
     * Lookup773: price_tools::PriceInfo
     **/
    PriceToolsPriceInfo: {
        priceFailures: string;
        spotPrices: string;
        averagePrice: string;
        needsUpdate: string;
        lastSpotPrice: string;
    };
    /**
     * Lookup774: price_tools::pallet::Error<T>
     **/
    PriceToolsError: {
        _enum: string[];
    };
    /**
     * Lookup775: ceres_staking::StakingInfo
     **/
    CeresStakingStakingInfo: {
        deposited: string;
        rewards: string;
    };
    /**
     * Lookup776: ceres_staking::pallet::Error<T>
     **/
    CeresStakingError: {
        _enum: string[];
    };
    /**
     * Lookup777: ceres_liquidity_locker::StorageVersion
     **/
    CeresLiquidityLockerStorageVersion: {
        _enum: string[];
    };
    /**
     * Lookup779: ceres_liquidity_locker::LockInfo<Balance, Moment, common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    CeresLiquidityLockerLockInfo: {
        poolTokens: string;
        unlockingTimestamp: string;
        assetA: string;
        assetB: string;
    };
    /**
     * Lookup780: ceres_liquidity_locker::pallet::Error<T>
     **/
    CeresLiquidityLockerError: {
        _enum: string[];
    };
    /**
     * Lookup781: ceres_token_locker::StorageVersion
     **/
    CeresTokenLockerStorageVersion: {
        _enum: string[];
    };
    /**
     * Lookup783: ceres_token_locker::TokenLockInfo<Balance, Moment, common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    CeresTokenLockerTokenLockInfo: {
        tokens: string;
        unlockingTimestamp: string;
        assetId: string;
    };
    /**
     * Lookup784: ceres_token_locker::pallet::Error<T>
     **/
    CeresTokenLockerError: {
        _enum: string[];
    };
    /**
     * Lookup786: ceres_governance_platform::VotingInfo
     **/
    CeresGovernancePlatformVotingInfo: {
        votingOption: string;
        numberOfVotes: string;
        ceresWithdrawn: string;
    };
    /**
     * Lookup787: ceres_governance_platform::PollInfo<Moment>
     **/
    CeresGovernancePlatformPollInfo: {
        numberOfOptions: string;
        pollStartTimestamp: string;
        pollEndTimestamp: string;
    };
    /**
     * Lookup788: ceres_governance_platform::StorageVersion
     **/
    CeresGovernancePlatformStorageVersion: {
        _enum: string[];
    };
    /**
     * Lookup789: ceres_governance_platform::pallet::Error<T>
     **/
    CeresGovernancePlatformError: {
        _enum: string[];
    };
    /**
     * Lookup790: ceres_launchpad::ILOInfo<Balance, sp_core::crypto::AccountId32, Moment, common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    CeresLaunchpadIloInfo: {
        iloOrganizer: string;
        tokensForIlo: string;
        tokensForLiquidity: string;
        iloPrice: string;
        softCap: string;
        hardCap: string;
        minContribution: string;
        maxContribution: string;
        refundType: string;
        liquidityPercent: string;
        listingPrice: string;
        lockupDays: string;
        startTimestamp: string;
        endTimestamp: string;
        contributorsVesting: string;
        teamVesting: string;
        soldTokens: string;
        fundsRaised: string;
        succeeded: string;
        failed: string;
        lpTokens: string;
        claimedLpTokens: string;
        finishTimestamp: string;
        baseAsset: string;
    };
    /**
     * Lookup791: ceres_launchpad::ContributorsVesting<Balance, Moment>
     **/
    CeresLaunchpadContributorsVesting: {
        firstReleasePercent: string;
        vestingPeriod: string;
        vestingPercent: string;
    };
    /**
     * Lookup792: ceres_launchpad::TeamVesting<Balance, Moment>
     **/
    CeresLaunchpadTeamVesting: {
        teamVestingTotalTokens: string;
        teamVestingFirstReleasePercent: string;
        teamVestingPeriod: string;
        teamVestingPercent: string;
    };
    /**
     * Lookup794: ceres_launchpad::ContributionInfo<Balance>
     **/
    CeresLaunchpadContributionInfo: {
        fundsContributed: string;
        tokensBought: string;
        tokensClaimed: string;
        claimingFinished: string;
        numberOfClaims: string;
    };
    /**
     * Lookup795: ceres_launchpad::pallet::Error<T>
     **/
    CeresLaunchpadError: {
        _enum: string[];
    };
    /**
     * Lookup796: demeter_farming_platform::TokenInfo<sp_core::crypto::AccountId32>
     **/
    DemeterFarmingPlatformTokenInfo: {
        farmsTotalMultiplier: string;
        stakingTotalMultiplier: string;
        tokenPerBlock: string;
        farmsAllocation: string;
        stakingAllocation: string;
        teamAllocation: string;
        teamAccount: string;
    };
    /**
     * Lookup798: demeter_farming_platform::UserInfo<common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    DemeterFarmingPlatformUserInfo: {
        baseAsset: string;
        poolAsset: string;
        rewardAsset: string;
        isFarm: string;
        pooledTokens: string;
        rewards: string;
    };
    /**
     * Lookup800: demeter_farming_platform::PoolData<common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    DemeterFarmingPlatformPoolData: {
        multiplier: string;
        depositFee: string;
        isCore: string;
        isFarm: string;
        totalTokensInPool: string;
        rewards: string;
        rewardsToBeDistributed: string;
        isRemoved: string;
        baseAsset: string;
    };
    /**
     * Lookup801: demeter_farming_platform::StorageVersion
     **/
    DemeterFarmingPlatformStorageVersion: {
        _enum: string[];
    };
    /**
     * Lookup802: demeter_farming_platform::pallet::Error<T>
     **/
    DemeterFarmingPlatformError: {
        _enum: string[];
    };
    /**
     * Lookup803: pallet_bags_list::list::Node<T, I>
     **/
    PalletBagsListListNode: {
        id: string;
        prev: string;
        next: string;
        bagUpper: string;
        score: string;
    };
    /**
     * Lookup804: pallet_bags_list::list::Bag<T, I>
     **/
    PalletBagsListListBag: {
        head: string;
        tail: string;
    };
    /**
     * Lookup806: pallet_bags_list::pallet::Error<T, I>
     **/
    PalletBagsListError: {
        _enum: {
            List: string;
        };
    };
    /**
     * Lookup807: pallet_bags_list::list::ListError
     **/
    PalletBagsListListListError: {
        _enum: string[];
    };
    /**
     * Lookup808: pallet_election_provider_multi_phase::ReadySolution<T>
     **/
    PalletElectionProviderMultiPhaseReadySolution: {
        supports: string;
        score: string;
        compute: string;
    };
    /**
     * Lookup810: pallet_election_provider_multi_phase::RoundSnapshot<T>
     **/
    PalletElectionProviderMultiPhaseRoundSnapshot: {
        voters: string;
        targets: string;
    };
    /**
     * Lookup816: pallet_election_provider_multi_phase::signed::SignedSubmission<sp_core::crypto::AccountId32, Balance, framenode_runtime::NposCompactSolution24>
     **/
    PalletElectionProviderMultiPhaseSignedSignedSubmission: {
        who: string;
        deposit: string;
        rawSolution: string;
        callFee: string;
    };
    /**
     * Lookup817: pallet_election_provider_multi_phase::pallet::Error<T>
     **/
    PalletElectionProviderMultiPhaseError: {
        _enum: string[];
    };
    /**
     * Lookup819: band::BandRate<BlockNumber>
     **/
    BandBandRate: {
        value: string;
        lastUpdated: string;
        lastUpdatedBlock: string;
        requestId: string;
        dynamicFee: string;
    };
    /**
     * Lookup821: band::pallet::Error<T, I>
     **/
    BandError: {
        _enum: string[];
    };
    /**
     * Lookup824: oracle_proxy::pallet::Error<T>
     **/
    OracleProxyError: {
        _enum: string[];
    };
    /**
     * Lookup826: hermes_governance_platform::HermesVotingInfo<StringLimit>
     **/
    HermesGovernancePlatformHermesVotingInfo: {
        votingOption: string;
        numberOfHermes: string;
        hermesWithdrawn: string;
    };
    /**
     * Lookup827: hermes_governance_platform::HermesPollInfo<sp_core::crypto::AccountId32, Moment, StringLimit, OptionsLimit, TitleLimit, DescriptionLimit>
     **/
    HermesGovernancePlatformHermesPollInfo: {
        creator: string;
        hermesLocked: string;
        pollStartTimestamp: string;
        pollEndTimestamp: string;
        title: string;
        description: string;
        creatorHermesWithdrawn: string;
        options: string;
    };
    /**
     * Lookup828: hermes_governance_platform::StorageVersion
     **/
    HermesGovernancePlatformStorageVersion: {
        _enum: string[];
    };
    /**
     * Lookup829: hermes_governance_platform::pallet::Error<T>
     **/
    HermesGovernancePlatformError: {
        _enum: string[];
    };
    /**
     * Lookup830: pallet_preimage::RequestStatus<sp_core::crypto::AccountId32, Balance>
     **/
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: {
                deposit: string;
                len: string;
            };
            Requested: {
                deposit: string;
                count: string;
                len: string;
            };
        };
    };
    /**
     * Lookup834: pallet_preimage::pallet::Error<T>
     **/
    PalletPreimageError: {
        _enum: string[];
    };
    /**
     * Lookup835: order_book::order_book::OrderBook<T>
     **/
    OrderBook: {
        orderBookId: string;
        status: string;
        lastOrderId: string;
        tickSize: string;
        stepLotSize: string;
        minLotSize: string;
        maxLotSize: string;
    };
    /**
     * Lookup837: order_book::limit_order::LimitOrder<T>
     **/
    OrderBookLimitOrder: {
        id: string;
        owner: string;
        side: string;
        price: string;
        originalAmount: string;
        amount: string;
        time: string;
        lifespan: string;
        expiresAt: string;
    };
    /**
     * Lookup847: order_book::pallet::Error<T>
     **/
    OrderBookError: {
        _enum: string[];
    };
    /**
     * Lookup850: bridge_proxy::BridgeRequest<sp_core::crypto::AccountId32, common::primitives::AssetId32<common::primitives::PredefinedAssetId>>
     **/
    BridgeProxyBridgeRequest: {
        source: string;
        dest: string;
        assetId: string;
        amount: string;
        status: string;
        startTimepoint: string;
        endTimepoint: string;
        direction: string;
    };
    /**
     * Lookup851: bridge_types::types::MessageDirection
     **/
    BridgeTypesMessageDirection: {
        _enum: string[];
    };
    /**
     * Lookup855: bridge_proxy::pallet::Error<T>
     **/
    BridgeProxyError: {
        _enum: string[];
    };
    /**
     * Lookup857: ethereum_light_client::PruningRange
     **/
    EthereumLightClientPruningRange: {
        oldestUnprunedBlock: string;
        oldestBlockToKeep: string;
    };
    /**
     * Lookup859: ethereum_light_client::StoredHeader<sp_core::crypto::AccountId32>
     **/
    EthereumLightClientStoredHeader: {
        submitter: string;
        header: string;
        totalDifficulty: string;
        finalized: string;
    };
    /**
     * Lookup861: ethereum_light_client::pallet::Error<T>
     **/
    EthereumLightClientError: {
        _enum: string[];
    };
    /**
     * Lookup862: bridge_inbound_channel::pallet::Error<T>
     **/
    BridgeInboundChannelError: {
        _enum: string[];
    };
    /**
     * Lookup863: bridge_types::types::GenericCommitmentWithBlock<BlockNumber, MaxMessages, MaxPayload>
     **/
    BridgeTypesGenericCommitmentWithBlock: {
        blockNumber: string;
        commitment: string;
    };
    /**
     * Lookup864: bridge_outbound_channel::pallet::Error<T>
     **/
    BridgeOutboundChannelError: {
        _enum: string[];
    };
    /**
     * Lookup866: eth_app::pallet::Error<T>
     **/
    EthAppError: {
        _enum: string[];
    };
    /**
     * Lookup870: erc20_app::pallet::Error<T>
     **/
    Erc20AppError: {
        _enum: string[];
    };
    /**
     * Lookup871: migration_app::pallet::Error<T>
     **/
    MigrationAppError: {
        _enum: string[];
    };
    /**
     * Lookup872: beefy_light_client::pallet::Error<T>
     **/
    BeefyLightClientError: {
        _enum: string[];
    };
    /**
     * Lookup873: substrate_bridge_channel::inbound::pallet::Error<T>
     **/
    SubstrateBridgeChannelInboundPalletError: {
        _enum: string[];
    };
    /**
     * Lookup874: substrate_bridge_channel::outbound::pallet::Error<T>
     **/
    SubstrateBridgeChannelOutboundPalletError: {
        _enum: string[];
    };
    /**
     * Lookup877: parachain_bridge_app::pallet::Error<T>
     **/
    ParachainBridgeAppError: {
        _enum: string[];
    };
    /**
     * Lookup884: bridge_data_signer::pallet::Error<T>
     **/
    BridgeDataSignerError: {
        _enum: string[];
    };
    /**
     * Lookup885: multisig_verifier::pallet::Error<T>
     **/
    MultisigVerifierError: {
        _enum: string[];
    };
    /**
     * Lookup888: pallet_sudo::pallet::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup889: faucet::pallet::Error<T>
     **/
    FaucetError: {
        _enum: string[];
    };
    /**
     * Lookup890: qa_tools::pallet::Error<T>
     **/
    QaToolsError: {
        _enum: string[];
    };
    /**
     * Lookup893: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup894: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup895: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup898: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup899: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup900: xor_fee::extension::ChargeTransactionPayment<T>
     **/
    XorFeeExtensionChargeTransactionPayment: {
        tip: string;
    };
    /**
     * Lookup901: framenode_runtime::Runtime
     **/
    FramenodeRuntimeRuntime: string;
};
export default _default;
