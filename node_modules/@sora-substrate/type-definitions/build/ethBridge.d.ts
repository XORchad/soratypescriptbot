declare const _default: {
    rpc: {
        getRequests: {
            description: string;
            params: ({
                name: string;
                type: string;
                isOptional?: undefined;
            } | {
                name: string;
                type: string;
                isOptional: boolean;
            })[];
            type: string;
        };
        getApprovedRequests: {
            description: string;
            params: ({
                name: string;
                type: string;
                isOptional?: undefined;
            } | {
                name: string;
                type: string;
                isOptional: boolean;
            })[];
            type: string;
        };
        getApprovals: {
            description: string;
            params: ({
                name: string;
                type: string;
                isOptional?: undefined;
            } | {
                name: string;
                type: string;
                isOptional: boolean;
            })[];
            type: string;
        };
        getAccountRequests: {
            description: string;
            params: ({
                name: string;
                type: string;
                isOptional?: undefined;
            } | {
                name: string;
                type: string;
                isOptional: boolean;
            })[];
            type: string;
        };
        getRegisteredAssets: {
            description: string;
            params: {
                name: string;
                type: string;
                isOptional: boolean;
            }[];
            type: string;
        };
    };
    types: {
        MultiChainHeight: {
            _enum: {
                Thischain: string;
                Sidechain: string;
            };
        };
        BridgeTimepoint: {
            height: string;
            index: string;
        };
        EthPeersSync: {
            isBridgeReady: string;
            isXorReady: string;
            isValReady: string;
        };
        BridgeStatus: {
            _enum: string[];
        };
        BridgeNetworkId: string;
        AssetKind: {
            _enum: string[];
        };
        RequestStatus: {
            _enum: string[];
        };
        SignatureParams: {
            r: string;
            s: string;
            v: string;
        };
        IncomingTransactionRequestKind: {
            _enum: string[];
        };
        IncomingMetaRequestKind: {
            _enum: string[];
        };
        IncomingRequestKind: {
            _enum: {
                Transaction: string;
                Meta: string;
            };
        };
        ChangePeersContract: {
            _enum: string[];
        };
        CurrencyIdEncoded: {
            _enum: {
                AssetId: string;
                TokenAddress: string;
            };
        };
        FixedBytes: string;
        OutgoingTransfer: {
            from: string;
            to: string;
            assetId: string;
            amount: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingTransferEncoded: {
            currencyId: string;
            amount: string;
            to: string;
            from: string;
            txHash: string;
            networkId: string;
            raw: string;
        };
        OutgoingAddAsset: {
            author: string;
            assetId: string;
            supply: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingAddAssetEncoded: {
            name: string;
            symbol: string;
            decimal: string;
            supply: string;
            sidechainAssetId: string;
            hash: string;
            networkId: string;
            raw: string;
        };
        OutgoingAddToken: {
            author: string;
            tokenAddress: string;
            ticker: string;
            name: string;
            decimals: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingAddTokenEncoded: {
            tokenAddress: string;
            ticker: string;
            name: string;
            decimals: string;
            hash: string;
            networkId: string;
            raw: string;
        };
        OutgoingAddPeer: {
            author: string;
            peerAddress: string;
            peerAccountId: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingAddPeerCompat: {
            author: string;
            peerAddress: string;
            peerAccountId: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingAddPeerEncoded: {
            peerAddress: string;
            txHash: string;
            networkId: string;
            raw: string;
        };
        OutgoingRemovePeer: {
            author: string;
            peerAccountId: string;
            peerAddress: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingRemovePeerCompat: {
            author: string;
            peerAccountId: string;
            peerAddress: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingRemovePeerEncoded: {
            peerAddress: string;
            txHash: string;
            networkId: string;
            raw: string;
        };
        OutgoingPrepareForMigration: {
            author: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingPrepareForMigrationEncoded: {
            thisContractAddress: string;
            txHash: string;
            networkId: string;
            raw: string;
        };
        OutgoingMigrate: {
            author: string;
            newContractAddress: string;
            erc20NativeTokens: string;
            nonce: string;
            networkId: string;
            timepoint: string;
        };
        OutgoingMigrateEncoded: {
            thisContractAddress: string;
            txHash: string;
            newContractAddress: string;
            erc20NativeTokens: string;
            networkId: string;
            raw: string;
        };
        OutgoingRequest: {
            _enum: {
                Transfer: string;
                AddAsset: string;
                AddToken: string;
                AddPeer: string;
                RemovePeer: string;
                PrepareForMigration: string;
                Migrate: string;
            };
        };
        OutgoingRequestEncoded: {
            _enum: {
                Transfer: string;
                AddAsset: string;
                AddToken: string;
                AddPeer: string;
                RemovePeer: string;
                PrepareForMigration: string;
                Migrate: string;
            };
        };
        IncomingTransfer: {
            from: string;
            to: string;
            assetId: string;
            assetKind: string;
            amount: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingAddToken: {
            tokenAddress: string;
            assetId: string;
            precision: string;
            symbol: string;
            name: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingChangePeers: {
            peerAccountId: string;
            peerAddress: string;
            added: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingChangePeersCompat: {
            peerAccountId: string;
            peerAddress: string;
            added: string;
            contract: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingCancelOutgoingRequest: {
            outgoingRequest: string;
            outgoingRequestHash: string;
            initialRequestHash: string;
            txInput: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingMarkAsDoneRequest: {
            outgoingRequestHash: string;
            initialRequestHash: string;
            author: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingPrepareForMigration: {
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingMigrate: {
            newContractAddress: string;
            author: string;
            txHash: string;
            atHeight: string;
            timepoint: string;
            networkId: string;
        };
        IncomingRequest: {
            _enum: {
                Transfer: string;
                AddToken: string;
                ChangePeers: string;
                CancelOutgoingRequest: string;
                MarkAsDone: string;
                PrepareForMigration: string;
                Migrate: string;
            };
        };
        LoadIncomingTransactionRequest: {
            author: string;
            hash: string;
            timepoint: string;
            kind: string;
            networkId: string;
        };
        LoadIncomingMetaRequest: {
            author: string;
            hash: string;
            timepoint: string;
            kind: string;
            networkId: string;
        };
        LoadIncomingRequest: {
            _enum: {
                Transaction: string;
                Meta: string;
            };
        };
        OffchainRequest: {
            _enum: {
                Outgoing: string;
                LoadIncoming: string;
                Incoming: string;
            };
        };
        EthBridgeStorageVersion: {
            _enum: string[];
        };
        EthAddress: string;
        BridgeSignatureVersion: {
            _enum: string[];
        };
    };
    typesAlias: {
        ethBridge: {
            StorageVersion: string;
        };
    };
};
export default _default;
