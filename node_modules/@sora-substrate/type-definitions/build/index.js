"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesBundle = exports.typesAlias = exports.types = exports.slimOverrideBundle = exports.rpc = exports.localTypes = exports.fullOverrideBundle = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ormlTypeDefinitions = require("@open-web3/orml-type-definitions");
var _utils = require("@open-web3/orml-type-definitions/utils");
var _runtime = _interopRequireDefault(require("./runtime"));
var _dexApi = _interopRequireDefault(require("./dexApi"));
var _dexManager = _interopRequireDefault(require("./dexManager"));
var _tradingPair = _interopRequireDefault(require("./tradingPair"));
var _template = _interopRequireDefault(require("./template"));
var _assets = _interopRequireDefault(require("./assets"));
var _irohaMigration = _interopRequireDefault(require("./irohaMigration"));
var _liquidityProxy = _interopRequireDefault(require("./liquidityProxy"));
var _ethBridge = _interopRequireDefault(require("./ethBridge"));
var _bridgeProxy = _interopRequireDefault(require("./bridgeProxy"));
var _pswapDistribution = _interopRequireDefault(require("./pswapDistribution"));
var _rewards = _interopRequireDefault(require("./rewards"));
var _farming = _interopRequireDefault(require("./farming"));
var _ceresStaking = _interopRequireDefault(require("./ceresStaking"));
var _ceresLiquidityLocker = _interopRequireDefault(require("./ceresLiquidityLocker"));
var _ceresTokenLocker = _interopRequireDefault(require("./ceresTokenLocker"));
var _ceresGovernancePlatform = _interopRequireDefault(require("./ceresGovernancePlatform"));
var _ceresLaunchpad = _interopRequireDefault(require("./ceresLaunchpad"));
var _demeterFarmingPlatform = _interopRequireDefault(require("./demeterFarmingPlatform"));
var _hermesGovernancePlatform = _interopRequireDefault(require("./hermesGovernancePlatform"));
var _vestedRewards = _interopRequireDefault(require("./vestedRewards"));
var _leafProvider = _interopRequireDefault(require("./leafProvider"));
var _basicChannel = _interopRequireDefault(require("./basicChannel"));
var _intentivizedChannel = _interopRequireDefault(require("./intentivizedChannel"));
var _versioned = _interopRequireDefault(require("./versioned"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const soraDefs = {
  assets: _assets.default,
  ceresGovernancePlatform: _ceresGovernancePlatform.default,
  ceresLiquidityLocker: _ceresLiquidityLocker.default,
  ceresStaking: _ceresStaking.default,
  ceresTokenLocker: _ceresTokenLocker.default,
  ceresLaunchpad: _ceresLaunchpad.default,
  demeterFarmingPlatform: _demeterFarmingPlatform.default,
  dexApi: _dexApi.default,
  dexManager: _dexManager.default,
  ethBridge: _ethBridge.default,
  bridgeProxy: _bridgeProxy.default,
  farming: _farming.default,
  hermesGovernancePlatform: _hermesGovernancePlatform.default,
  irohaMigration: _irohaMigration.default,
  liquidityProxy: _liquidityProxy.default,
  pswapDistribution: _pswapDistribution.default,
  rewards: _rewards.default,
  runtime: _runtime.default,
  template: _template.default,
  tradingPair: _tradingPair.default,
  vestedRewards: _vestedRewards.default,
  leafProvider: _leafProvider.default,
  basicChannel: _basicChannel.default,
  intentivizedChannel: _intentivizedChannel.default
};
const overrides = {
  Address: 'AccountId',
  LookupSource: 'AccountId',
  AssetId: 'AssetId32',
  Keys: 'SessionKeys3',
  RefCount: 'u32',
  Balance: 'u128',
  TAssetBalance: 'Balance',
  MultiCurrencyBalance: 'Balance',
  MultiCurrencyBalanceOf: 'MultiCurrencyBalance',
  AccountInfo: 'AccountInfoWithDualRefCount'
};
const types = _objectSpread(_objectSpread(_objectSpread({}, _ormlTypeDefinitions.types), (0, _utils.typesFromDefs)(soraDefs)), overrides);
exports.types = types;
const localTypes = _objectSpread(_objectSpread({}, (0, _utils.typesFromDefs)(soraDefs)), overrides);
exports.localTypes = localTypes;
const typesBundle = {
  spec: {
    sora: {
      types
    }
  }
};
exports.typesBundle = typesBundle;
const rpc = (0, _utils.jsonrpcFromDefs)(soraDefs, _objectSpread({}, _ormlTypeDefinitions.rpc));
exports.rpc = rpc;
const typesAlias = (0, _utils.typesAliasFromDefs)(soraDefs, _objectSpread({}, _ormlTypeDefinitions.typesAlias));
exports.typesAlias = typesAlias;
const slimOverrideBundle = {
  spec: {
    sora: {
      types: [..._versioned.default].map(version => {
        return {
          minmax: version.minmax,
          types: _objectSpread(_objectSpread({}, types), version.types)
        };
      })
    }
  }
};
exports.slimOverrideBundle = slimOverrideBundle;
const fullOverrideBundle = {
  spec: {
    sora: {
      alias: typesAlias,
      rpc,
      types: [..._versioned.default].map(version => {
        return {
          minmax: version.minmax,
          types: _objectSpread(_objectSpread({}, types), version.types)
        };
      })
    }
  }
};
exports.fullOverrideBundle = fullOverrideBundle;