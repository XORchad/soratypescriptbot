declare const _default: {
    rpc: {};
    types: {
        AssetIdOf: string;
        Amount: string;
        AmountOf: string;
        CurrencyId: string;
        CurrencyIdOf: string;
        BasisPoints: string;
        Fixed: string;
        FarmId: string;
        DEXId: string;
        DEXIdOf: string;
        DEXInfo: {
            baseAssetId: string;
            defaultFee: string;
            defaultProtocolFee: string;
        };
        BalancePrecision: string;
        AssetSymbol: string;
        AssetName: string;
        AssetId32: string;
        SwapWithDesiredInput: {
            desiredAmountIn: string;
            minAmountOut: string;
        };
        SwapWithDesiredOutput: {
            desiredAmountOut: string;
            maxAmountIn: string;
        };
        SwapAmount: {
            _enum: {
                WithDesiredInput: string;
                WithDesiredOutput: string;
            };
        };
        QuoteWithDesiredInput: {
            desiredAmountIn: string;
        };
        QuoteWithDesiredOutput: {
            desiredAmountOut: string;
        };
        QuoteAmount: {
            _enum: {
                WithDesiredInput: string;
                WithDesiredOutput: string;
            };
        };
        SwapVariant: {
            _enum: string[];
        };
        TechAmount: string;
        TechBalance: string;
        SwapOutcome: {
            amount: string;
            fee: string;
        };
        LiquiditySourceType: {
            _enum: string[];
        };
        FilterMode: {
            _enum: string[];
        };
        SwapOutcomeInfo: {
            amount: string;
            fee: string;
        };
        TradingPair: {
            baseAssetId: string;
            targetAssetId: string;
        };
        PermissionId: string;
        HolderId: string;
        OwnerId: string;
        Mode: {
            _enum: string[];
        };
        Scope: {
            _enum: {
                Limited: string;
                Unlimited: string;
            };
        };
        OracleKey: string;
        ChargeFeeInfo: {
            tip: string;
            target_asset_id: string;
        };
        SwapAction: string;
        ValidationFunction: string;
        Permission: string;
        DistributionAccounts: string;
        MultisigAccount: {
            signatories: string;
            threshold: string;
        };
        Farmer: string;
        Farm: string;
        SmoothPriceState: string;
        MultiCurrencyBalanceOf: string;
        Duration: string;
        PostDispatchInfo: {
            actualWeight: string;
            paysFee: string;
        };
        DispatchErrorWithPostInfoTPostDispatchInfo: {
            postInfo: string;
            error: string;
        };
        DispatchResultWithPostInfo: string;
        Public: string;
        RewardReason: {
            _enum: string[];
        };
        StorageVersion: string;
        MarketMakerInfo: {
            count: string;
            volume: string;
        };
        CrowdloanReward: {
            id: string;
            address: string;
            contribution: string;
            xorReward: string;
            valReward: string;
            pswapReward: string;
            xstusdReward: string;
            percent: string;
        };
        PredefinedAssetId: {
            _enum: string[];
        };
        RewardInfo: {
            limit: string;
            totalAvailable: string;
            rewards: string;
        };
        TechTradingPair: {
            baseAssetId: string;
            targetAssetId: string;
        };
        TechAssetId: {
            _enum: {
                Wrapped: string;
                Escaped: string;
            };
        };
        TechPurpose: {
            _enum: {
                FeeCollector: string;
                FeeCollectorForPair: string;
                LiquidityKeeper: string;
                Identifier: string;
            };
        };
        TechAccountId: {
            _enum: {
                Pure: string;
                Generic: string;
                Wrapped: string;
                WrappedRepr: string;
            };
        };
        PriceInfo: {
            priceFailures: string;
            spotPrices: string;
            averagePrice: string;
            needsUpdate: string;
            lastSpotPrice: string;
        };
        ContentSource: string;
        Description: string;
    };
};
export default _default;
